/*
 * File: app/controller/Upload.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TaskManager.controller.Upload', {
    extend: 'Ext.app.Controller',

    refs: {
        viewPan: '#viewPan',
        newRequest: '#newRequest'
    },

    control: {
        "#btnNew": {
            click: 'onBtnNewClick'
        },
        "#btnEdit": {
            click: 'onBtnEditClick'
        },
        "#btnSubmit": {
            click: 'onBtnSubmitClick'
        },
        "#btnAddColumn": {
            click: 'onBtnAddColumnClick'
        },
        "#btnDelColumn": {
            click: 'onBtnDelColumnClick'
        },
        "#btnDelAllColumn": {
            click: 'onBtnDelAllColumnClick'
        },
        "#btnReset": {
            click: 'onBtnResetClick'
        },
        "#files": {
            change: 'onMultiFileSelected'
        }
    },

    onBtnNewClick: function(show) {
        var newWin = Ext.getCmp('newRequestWin_' + selectedCategory);
        if(!newWin){
            var newRqt;
            newRqt = Ext.create(appName + '.view.NewRequest', {
                selectedIndex:-1//means not edit mode
            });
            newRqt.down('#requestTitle').setText(categoryName + ' ' + locale.upload.uploadTitle);
            var fStore = Ext.getStore('fStore_' + selectedCategory);
            this.setCustomFields(fStore, newRqt.down('#customFieldCon'));

            var newWin = Ext.create('Ext.window.Window', {
                width:700,
                bodyStyle:'padding:20px',
                closeAction:'hide',
                height:window.innerHeight - 100,
                overflowY:'auto',
                ghost:false,
                id:'newRequestWin_' + selectedCategory,
                resizable:true,
                layout:{
                    type:'hbox'
                },
                modal:true,
                dockedItems: [
                    {
                        xtype: 'container',
                        flex: 1,
                        dock: 'bottom',
                        itemId: 'buttonCon',
                        margin: '20 0 0 0',
                        padding:'15 0 30 0',
                        style:'border-top:3px solid #bebebe',
                        layout: {
                            type: 'hbox',
                            align: 'middle',
                            pack: 'center'
                        },
                        items: [
                            {
                                xtype: 'button',
                                itemId: 'btnSubmit',
                                width: 80,
                                bind: {
                                    text: '{submit}'
                                }
                            },
                            {
                                xtype: 'button',
                                itemId: 'btnReset',
                                margin: '0 0 0 10',
                                width: 80,
                                bind: {
                                    text: '{reset}'
                                }
                            },
                            {
                                xtype: 'button',
                                itemId: 'btnCancel',
                                margin: '0 0 0 10',
                                width: 80,
                                bind: {
                                    text: '{cancel}'
                                },
                                listeners: {
                                    click: function(){
                                        newWin.close();
                                    }
                                }
                            }
                        ]
                    }
                ]
            }).show();
            newWin.add(newRqt);
        }

        /* created by the new button or click by a category */
        show = (!show)? show = false : true;
        if(show){
            newWin.show();
        }
        else{
            newWin.hide();
        }
    },

    onBtnEditClick: function(button) {

        var me = this;
        /* get selected item from list */
        var wPan = getController('Main').getWestPanel();
        var grid = wPan.getActiveTab();
        var chks = grid.getSelectionModel().getSelection();
        if(chks.length === 0){
            alert(locale.upload.noneSelected);
            return;
        }
        var selected = chks[0];
        /* row index of grid */
        var selectedIndex = grid.getStore().indexOf(selected);

        var i, j;
        //Update field store with values to use dataset in editmode
        var fStore = Ext.getStore('fStore_' + selected.get('ca_id'));

        /* new request form */
        var newRqt = Ext.create(appName + '.view.NewRequest', {
            isEditMode:true,
            id:'newRequest',
            selectedIndex:selectedIndex,
            listeners:[
                {
                    afterrender:function(){
                        var title = newRqt.down('#requestTitle').setText(categoryName + ' ' + locale.upload.uploadTitleInEdit);
                        newRqt.setSubject(selected.get('bd_subject'));
                        newRqt.setRemark(selected.get('bd_content'));
                        newRqt.setColortag(selected.get('bd_colortag'));
                        var hiddenIdx = newRqt.down('#bdIdx');
                        /* set parameter by hidden field */
                        hiddenIdx.setValue(selected.get('bd_idx'));

                        /* get file info */
                        var chks = grid.getSelectionModel().getSelection();
                        var files = chks[0].get('bd_file');
                        if(files && files.length > 0){
                            var extCon = newRqt.down('#existFilesCon');
                            /* show title of exists file container */
                            newRqt.down('#titleExistFile').setHidden(false);
                            extCon.setHidden(false);
                            var html = '';
                            Ext.Array.each(files, function(entry, index){
                                var fid = 'existfile_'+index;
                                var tPath =  entry.thumb_path;
                                if(!Ext.isIE) tPath += '/T?c=' + randomString(16);
                                html += '<div id="'+fid+'" style="float:left;height:40px;border:1px solid #cccccc;margin:3px;border-radius:3px;vertical-align:middle">';
                                html += '<div style="float:left;width:40px;height:100%;background-image:url('+ tPath +')" class="center-image"></div>';
                                html += '<div style="padding:10px 0 3px 0;color:#555555;float:left">'+entry.file_name+'</div>';
                                html += '<div onclick="getController(\'Upload\').delAttachedFile(document.getElementById(\''+fid+'\'))" style="float:right;height:12px;width:12px;background-color:#3892d3;text-align:center;color:white;margin:0 0 0 5px;cursor:pointer;line-height:12px">';
                                html += '-</div>';
                                html += '</div>';
                            });
                            extCon.setHtml(html);
                            extCon.attachedfileLength = files.length;
                            extCon.delEntry = [];
                        }
                    }
                }
            ]
        });


        me.setCustomFields(fStore, newRqt.down('#customFieldCon'), true);

        /* parent window of new request form */
        var newWin = Ext.create('Ext.window.Window', {
            width:700,
            bodyStyle:'padding:20px',
            ghost:false,
            id:'editRequestWin_' + selectedCategory,
            height:window.innerHeight - 100,
            overflowY:'auto',
            resizable:true,
            layout:{
                type:'hbox'
            },
            modal:true,
            dockedItems: [
                {
                    xtype: 'container',
                    flex: 1,
                    dock: 'bottom',
                    itemId: 'buttonCon',
                    margin: '20 0 0 0',
                    padding:'15 0 30 0',
                    style:'border-top:3px solid #bebebe',
                    layout: {
                        type: 'hbox',
                        align: 'middle',
                        pack: 'center'
                    },
                    items: [
                        {
                            xtype: 'button',
                            itemId: 'btnSubmit',
                            width: 80,
                            bind: {
                                text: '{edit}'
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'btnReset',
                            margin: '0 0 0 10',
                            width: 80,
                            bind: {
                                text: '{reset}'
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'btnCancel',
                            margin: '0 0 0 10',
                            width: 80,
                            bind: {
                                text: '{cancel}'
                            },
                            listeners: {
                                click: function(){
                                    newWin.close();
                                }
                            }
                        }
                    ]
                }
            ]
        });
        newWin.add(newRqt);
        newWin.show();
    },

    onBtnSubmitClick: function(button) {
        var me = this;
        var win = button.up('window');
        var form = win.down('form');

        Ext.data.JsonP.request({
            url:getDataWriteApi(),
            params:{
                ca_id:selectedCategory,
                html:0
            },
            success:function(response){
                var cList = response.categoryColsList;
                for(i=0; i<cList.length; i++){
                    Ext.Object.each(cList[i], function(key, value){
                        /* if autoidx field is installed, update it */
                        if(key == 'cols_type' && value == 'idx' && !form.isEditMode){
                            form.down('#indexKey').setValue(cList[i].data_val);
                        }
                    });
                }
                me.postRequest(win);
            },
            failure:function(response){
                alert(locale.main.networkProblem);
            }

        });

    },

    onBtnAddColumnClick: function(button) {
        var grid = button.up('container').up('container').down('gridpanel');
        var store = grid.getStore();
        var emptyData = {subIdx:''};
        Ext.Array.each(grid.colsInfo, function(entry){
            if(entry.cols_type != 'date')
                emptyData[entry.cols_idx] = '';
        });
        store.add(emptyData);
    },

    onBtnDelColumnClick: function(button) {
        var grid = button.up('container').up('container').down('gridpanel');
        var selected = grid.getSelectionModel().getSelection();
        var store = grid.getStore();
        store.on('remove', function onRemove(){
            store.un('remove', onRemove);
            if(store.getCount() === 0){
                var emptyData = {subIdx:''};
                Ext.Array.each(grid.colsInfo, function(entry){
                    if(entry.cols_type != 'date')
                        emptyData[entry.cols_idx] = '';
                });
                store.insert(0, emptyData);
            }
            grid.getView().refresh();
        });
        if(selected.length === 0){
            alert(locale.upload.noneSelected);
        }
        else{
            store.remove(selected);
        }
    },

    onBtnDelAllColumnClick: function(button, e, eOpts) {
        var grid = button.up('container').up('container').down('gridpanel');
        var store = grid.getStore();
        store.removeAll();
        var emptyData = {subIdx:''};
        Ext.Array.each(grid.colsInfo, function(entry){
            if(entry.cols_type != 'date')
                emptyData[entry.cols_idx] = '';
        });
        store.insert(0, emptyData);
    },

    onBtnResetClick: function(button) {
        var newRqt = button.up('window').down('#newRequest');
        newRqt.reset();
        var dsetGrid = Ext.ComponentQuery.query('datasetgridbox #datasetGrid');
        //if dataset field exists, reset dataset fields
        Ext.Array.each(dsetGrid, function(item){
            var store = item.getStore();
            var obj = store.getData().items[0].data;
            var nData = {};
            Ext.Object.each(obj, function(key, value){
                if(key !== 'id'){
                    nData[key] = '';
                }
                if(key == 'cols_info'){
                    nData[key] = value;
                }
            });
            store.removeAll();
            store.add(nData);
        });
    },

    onMultiFileSelected: function(field, newValue, oldValue, eOpts) {
        var el = Ext.get(field.id+'-inputEl');
        var files = el.dom.files;
        var selectedFilesCon = field.up('#multiFileCon').down('#selectedFilesCon');
        var grid = selectedFilesCon.down('grid');
        var infos = [];
        Ext.Array.each(files, function(entry){
            var info = {};
            info.file = entry;
            info.size = entry.size;
            info.filename = entry.name;
            info.modified = entry.lastModifiedDate;
            info.type = entry.type;
            if(!grid){
                infos.push(info);
            }
            else{
                grid.getStore().add(info);
            }
        });

        if(!grid){
            var store = Ext.create('Ext.data.Store', {
                fields:[
                    {
                        name:'file'
                    },
                    {
                        name:'size',
                        convert:function(v){
                            var ctlr = getController('Viewer');
                            return ctlr.autoFilesizeFormat(v);
                        }
                    },
                    {
                        name:'filename'
                    },
                    {
                        name:'modified'
                    },
                    {
                        name:'type'
                    }
                ],
                data:infos
            });

            var sm = new Ext.selection.CheckboxModel({
                checkOnly: true
            });

            grid = Ext.create('Ext.grid.Panel', {
                closable:true,
                enableCtxMenu:false,
                store:store,
                width:'100%',
                header:false,
                selModel:sm,
                cls:'uploadGrid',
                tdAttrs:{
                    style:{valign:'middle'}
                },
                columns:[
                    {
                        text:locale.upload.image,
                        dataIndex:'file',
                        renderer:function(value, metaData, record, rowIndex){
                            var fn = value.name.split('.');
                            var ext = fn[fn.length - 1].toLowerCase();
                            var reader = new FileReader();
                            var divID = "gImg_" + rowIndex;
                            var icoPath = 'resources/ico_ext/ext_' + ext + '.png';
                            var source = '<div id="'+divID+'" style="width:30px;height:30px" class="center-image"></div>';
                            if(ext == 'gif' || ext == 'jpg'|| ext == 'png'){
                                if(value.size > 20000000){
                                    source = '<div id="'+divID+'" style="width:30px;height:30px;background-image:url('+icoPath+')" class="center-image"></div>';
                                }
                                else{
                                    reader.onload = function(e){
                                        var div = document.getElementById(divID);
                                        div.style['background-image'] = 'url(' + e.target.result + ')';
                                    };
                                    reader.readAsDataURL(value);
                                }
                            }
                            else{
                                source = '<div id="'+divID+'" style="width:30px;height:30px;background-image:url('+icoPath+')" class="center-image"></div>';
                            }

                            return source;
                        },
                        width:70
                    },
                    {
                        text:locale.upload.fileName,
                        dataIndex:'filename',
                        width:240
                    },
                    {
                        text:locale.upload.fileSize,
                        dataIndex:'size',
                        width:110
                    },
                    {
                        text:locale.upload.modified,
                        dataIndex:'modified',
                        flex:1
                    }
                ],
                listeners:[]
            });
            selectedFilesCon.add(grid);
        }

    },

    setCustomFields: function(fStore, target, isEditMode) {
        var me = this;
        var i, j;
        fStore.each(function(record){
            /* field width */
            var fldW = '100%';
            /* kind of text fields for automation */
            var txtFields = ['text', 'dbtext', 'url', 'number', 'htmleditor'];
            /* fields idx to use when upload by data_xxxx */
            var colsIdx = record.get('cols_idx').toString();
            /* make upload parameter with cols_idx */
            if(colsIdx.length == 1){
                colsIdx = '000' + colsIdx;
            }
            if(colsIdx.length == 2){
                colsIdx = '00' + colsIdx;
            }
            if(colsIdx.length == 3){
                colsIdx = '0' + colsIdx;
            }
            var fIdx = 'data_' + colsIdx;
            /* itemid for each field */
            var iId = 'iid' + fIdx;
            /* name of field to upload form */
            var fName = record.get('cols_name');
            /* current value incase of update(Edit) mode */
            var preVal = record.get('data_val');

            /* fields for kind of textfields */
            if(Ext.Array.contains(txtFields, record.get('cols_type'))){
                var fldText = Ext.create('Ext.form.TextField', {
                    itemId: iId,
                    fieldLabel: fName,
                    name: fIdx,
                    cls:'requestform-space'
                });
                target.add(fldText);
                if(isEditMode){
                    fldText.setValue(preVal);
                }
                target.add({xtype:'formspacer'});
            }
            /* field for auto numbering field */
            if(record.get('cols_type') == 'idx'){
                var fldIdx = Ext.create('Ext.form.TextField', {
                    xtype: 'textfield',
                    width: '100%',
                    itemId: 'indexKey',
                    name: fIdx,
                    hidden:true,
                    cls:'requestform-space'
                });
                target.add(fldIdx);
                if(isEditMode){
                    fldIdx.setValue(preVal);
                }
                target.add({xtype:'formspacer'});
            }

            /* field for textarea */
            if(record.get('cols_type') == 'textarea'){
                var fldEditor = Ext.create('Ext.form.HtmlEditor', {
                    xtype: 'htmleditor',
                    height: 250,
                    width: '100%',
                    itemId:iId,
                    referenceHolder: true,
                    fieldLabel: fName,
                    labelAlign: 'top',
                    labelWidth:0,
                    name: fIdx,
                    enableFont: false,
                    cls:'requestform-space'
                });
                target.add(fldEditor);
                if(isEditMode){
                    fldEditor.setValue(preVal);
                }
                target.add({xtype:'formspacer'});
            }

            /* field for color */
            if(record.get('cols_type') == 'color'){
                var fldColor = Ext.create('Ext.form.field.Hidden',{
                    xtype:'hiddenfield',
                    itemId:iId,
                    name: fIdx,
                    cls:'requestform-space'
                });
                target.add(fldColor);
                if(isEditMode){
                    fldColor.setValue(preVal);
                }
            }

            /* field for color256 */
            if(record.get('cols_type') == 'color256'){
                var fld256 = Ext.create('Ext.form.field.Hidden',{
                    xtype:'hiddenfield',
                    itemId:iId,
                    name: fIdx,
                    cls:'requestform-space'
                });
                target.add(fld256);
                if(isEditMode){
                    fld256.setValue(preVal);
                }
            }

            /* field for select */
            if(record.get('cols_type') == 'select'){
                var sltData = record.get('cols_data');
                var fldSelect = Ext.create('Ext.form.field.ComboBox', {
                    itemId: iId,
                    minWidth: 220,
                    width: '100%',
                    autoFitErrors: false,
                    fieldLabel: fName,
                    name: fIdx,
                    autoSelect: false,
                    store:sltData,
                    cls:'requestform-space'
                });
                target.add(fldSelect);
                if(isEditMode){
                    fldSelect.setValue(preVal);
                }
                target.add({xtype:'formspacer'});
            }

            /* field for date */
            if(record.get('cols_type') == 'date'){
                var fldDate = Ext.create('Ext.form.DateField', {
                    width: '100%',
                    itemId: iId,
                    fieldLabel: fName,
                    name: fIdx,
                    cls:'requestform-space'
                });
                target.add(fldDate);
                if(isEditMode){
                    fldDate.setValue(preVal);
                }
                target.add({xtype:'formspacer'});
            }

            /* field for radiobutton */
            if(record.get('cols_type') == 'radio'){
                var rdoCon = Ext.create('Ext.container.Container', {
                    width:'100%',
                    cls:'requestform-space'
                });
                var rdoData = record.get('cols_data');

                var rg = Ext.create('Ext.form.RadioGroup', {
                    fieldLabel: fName,
                    columns:3,
                    vertical:true,
                    itemId: iId,
                    width: '100%'
                });
                for(i=0; i<rdoData.length; i++){
                    var val = false;
                    if(isEditMode){
                        if(rdoData[i] == preVal){
                            val = true;
                        }
                    }
                    var rdo = {
                        boxLabel:rdoData[i],
                        name:fIdx,
                        margin:'0 10 0 0',
                        inputValue:rdoData[i],
                        value:val
                    };
                    rg.add(rdo);
                }
                rdoCon.add(rg);
                target.add(rdoCon);
                target.add({xtype:'formspacer'});
            }

            /* field for checkbox */
            if(record.get('cols_type') == 'check'){
                var chkCon = Ext.create('Ext.container.Container', {
                    width:'100%',
                    cls:'requestform-space'
                });
                var chkData = record.get('cols_data');

                var cg = Ext.create('Ext.form.CheckboxGroup', {
                    fieldLabel: fName,
                    columns:3,
                    vertical: true,
                    itemId: iId,
                    width: '100%'
                });
                for(i=0; i<chkData.length; i++){
                    var chkItem = chkData[i].trim();
                    var chkVal = false;
                    if(isEditMode){
                        var cbArr = preVal.split(',');
                        for(j=0; j<cbArr.length; j++){
                            cbArr[j] = cbArr[j].trim();
                        }
                        if(Ext.Array.contains(cbArr, chkItem)) chkVal = true;
                    }
                    var chk = {
                        boxLabel:chkItem,
                        name:fIdx,
                        margin:'0 10 0 0',
                        inputValue:chkItem,
                        value:chkVal
                    };
                    cg.add(chk);

                }
                chkCon.add(cg);
                target.add(chkCon);
                target.add({xtype:'formspacer'});
            }

            /* field for dbgroup field */
            if(record.get('cols_type') == 'datagrp'){
                var grpCon = Ext.create('Ext.container.Container', {
                    layout:{
                        type:'hbox'
                    },
                    width:'100%',
                    padding:5,
                    cls:'requestform-space',
                    style:'border:1px solid #cecece'
                });
                var fldgrp = Ext.create('Ext.form.TextField', {
                    xtype: 'textfield',
                    itemId: iId,
                    flex:1,
                    fieldLabel: fName,
                    name: fIdx
                });
                /* button to browse datagroup category */
                var grpBtn = {
                    xtype:'button',
                    width:25,
                    height:25,
                    ui:'plain-toolbar-small',
                    icon:'resources/images/ico_folder.png',
                    handler:function(button){
                        var grpWin = Ext.create(appName + '.view.DataGroupWindow', {
                            itemId:fIdx,
                            relatedCategory:record.get('cols_category')
                        });
                        grpWin.show();
                        var grid = grpWin.down('#dgGrid');
                        grid.on('cellclick', function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts){
                            fldgrp.setValue(record.get('bd_subject'));
                            grpWin.close();
                        });
                    }
                };
                if(isEditMode){
                    fldgrp.setValue(preVal);
                }
                grpCon.add(fldgrp);
                grpCon.add(grpBtn);
                target.add(grpCon);
                target.add({xtype:'formspacer'});
            }

            /* field for colorchk */
            if(record.get('cols_type') == 'colorchk'){
                var colorChkCon = Ext.create('Ext.container.Container', {
                    width:'100%',
                    cls:'requestform-space'
                });
                var cCData = record.get('cols_data');

                var ccg = Ext.create('Ext.form.CheckboxGroup', {
                    fieldLabel: fName,
                    columns:3,
                    vertical: true,
                    itemId: iId,
                    width: '100%'
                });
                for(i=0; i<cCData.length; i++){
                    var ccVal = false;
                    var ccItem = cCData[i][2];
                    if(isEditMode){
                        var preArr = preVal.split(',');
                        for(j=0; j<preArr.length; j++){
                            preArr[j] = preArr[j].trim();
                        }
                        if(Ext.Array.contains(preArr, ccItem)) ccVal = true;
                    }
                    var cChk = Ext.create('Ext.form.field.Checkbox', {
                        name:fIdx,
                        margin:'0 10 0 0',
                        inputValue:ccItem,
                        boxLabel:ccItem.split('||')[1],
                        value:ccVal,
                        beforeLabelTpl :[
                            '<div style="float:left;width:14px;height:14px;margin-top:6px;background-color:'+ccItem.split('||')[0]+'"></div>'
                        ]
                    });
                    ccg.add(cChk);
                }
                colorChkCon.add(ccg);
                target.add(colorChkCon);
                target.add({xtype:'formspacer'});

            }

            /* field for link */
            if(record.get('cols_type') == 'link'){
                var links = Ext.create(appName + '.view.LinkedData', {
                    cls:'requestform-space',
                    style:'padding:5px;border:1px solid #cecece',
                    itemId:fIdx
                });
                /* container for each thumbnail and title of linked data */
                var linkUnitCon = Ext.create('Ext.container.Container', {
                    flex: 1,
                    itemId: fIdx + '_unitCon',
                    scrollable: true,
                    layout: 'hbox'
                });
                links.setFieldLabel(fName);
                links.add(linkUnitCon);
                var addLnkBtn = links.down('#addLink');
                var hdnLnkFld = Ext.create('Ext.form.field.Hidden', {
                    name:fIdx,
                    itemId:fIdx + '_hidden'
                });
                links.add(hdnLnkFld);
                addLnkBtn.on('click', function(){
                    var lnkWin = Ext.create(appName + '.view.LinkingWindow', {
                        itemId:fIdx,
                        opener:target.up('window')
                    });
                    lnkWin.show();

                });
                target.add(links);
                if(isEditMode){
                    /* bd_idx Array */
                    var lnkData = record.get('data_val').split(',');
                    for(i=0; i<lnkData.length; i++){
                        /* get information of each data in link from server */
                        Ext.data.JsonP.request({
                            url:getDataWriteApi() + '?bd_idx=' + lnkData[i].trim(),
                            success:function(response){
                                if(response.binderBean.bd_file === undefined) return;
                                var unit = Ext.create(appName + '.view.LinkUnit', {
                                    bd_idx:response.binderBean.bd_idx,
                                    itemId:'unit_' + response.binderBean.bd_idx
                                });
                                var path = 'resources/images/ico_noimage.gif';
                                if(response.binderBean.bd_file.length > 0){
                                    path = response.binderBean.bd_file[0].thumb_path;
                                }
                                unit.down('#image').setStyle('background-image', 'url(' +path+ ')');
                                unit.getViewModel().setData({
                                    unitTitle:response.binderBean.bd_subject,
                                    src:path
                                });
                                linkUnitCon.add(unit);
                            }
                        });
                    }
                }
                target.add({xtype:'formspacer'});
            }

            /* field for multi-select */
            if(record.get('cols_type') == 'dbl_select'){
                var fldDbl = Ext.create('Ext.form.TextField', {
                    itemId: iId,
                    fieldLabel: fName,
                    name: fIdx,
                    cls:'requestform-space',
                    listeners:{
                        render:function(cmp){
                            cmp.el.on('click', function(){
                                var targetFld = cmp;
                                /* item preset in multi-select  */
                                var dblData = record.get('cols_data');
                                /* Array data for the first combobox */
                                var fstData = [];
                                for(i=0; i<dblData.length; i++){
                                    fstData.push({name:dblData[i].data, subData:dblData[i].subdata});
                                }
                                /* store for the first combobox */
                                var fstStore = Ext.create('Ext.data.Store', {
                                    fields:['name', 'subData'],
                                    data : fstData
                                });
                                /* show multi select window */
                                var dblSelecCon= Ext.create(appName + '.view.MultiSelectWindow', {
                                    title:record.get('cols_name'),
                                    modal:true,
                                    alwaysOnTop:true
                                });

                                /* value field in MultiSelectWindow */
                                var valFld = dblSelecCon.down('#valueField');
                                /* fill given value to value field */
                                if(isEditMode){
                                    valFld.setValue(targetFld.getValue());
                                }
                                /* connect store to first select option */
                                dblSelecCon.setFirstStore(fstStore);
                                dblSelecCon.show();
                                dblSelecCon.on('close', function(){
                                    if(dblSelecCon.getTitle() === ''){//empty title means it has new data when btnOk click
                                        targetFld.setValue(valFld.getValue());
                                    }
                                    else{//existing title means click 'cancel' or 'close' button
                                        dblSelecCon.down('#valueField').setValue('');
                                    }
                                });
                            });
                        }
                    }
                });
                if(isEditMode){
                    fldDbl.setValue(preVal);
                }
                target.add(fldDbl);
                target.add({xtype:'formspacer'});

            }

            /* field for dataset */
            if(record.get('cols_type') == 'dataset'){
                me.setDatasetField(record, isEditMode, target);
            }
        });
    },

    setDatasetField: function(record, isEditMode, target) {
        var i, j;
        var colsIdx = record.get('cols_idx').toString();
        var fIdx = 'data_' + colsIdx;
        var dsetCon = Ext.create(appName + '.view.DatasetGridBox', {
            style:'margin-bottom:10px',
            cls:'requestform-space'
        });
        var grid = dsetCon.getGrid();
        dsetCon.addTitle(record.get('cols_name') + ':');

        /* data for store in grid */
        var storeData = [];
        /* colums for grid according to sub-fields */
        var clms = [];
        /* model fields for store */
        /* cols_info is a preset fields to be used by edit(specially dbl_select) */
        var flds = [{name:'cols_info'}, {name:'subIdx'}];
        /* idx of sub-fields */
        var subColsIdxs = [];
        /* generate infomarion each column */
        var subColsInfos = [];


        var colsData = record.get('cols_data');
        for(i=0; i<colsData.length; i++){
            /* object item for storeData */
            /* [{name:'cols_info'}, {name:'cdx'}] */
            var storeObj = {};
            if(i === 0){// for header
                var tmpItem = colsData[i].slice(); // slice to keep original item properties
                tmpItem.shift();
                storeObj.cols_info = tmpItem;
                grid.colsInfo = tmpItem;
                /* valiItem:sub-fields information that is included cols_name, cols_idx and cols_type */
                for(j=0; j<colsData[i].length; j++){
                    var colsInfo = colsData[i][j];
                    /* arrange sub-fields into storeObj */
                    if(j > 0){
                        /* generate cell dataindex */
                        var cdx = colsInfo.cols_idx.toString();

                        if(cdx.length == 1){
                            cdx = '000' + cdx;
                        }
                        if(cdx.length == 2){
                            cdx = '00' + cdx;
                        }
                        if(cdx.length == 3){
                            cdx = '0' + cdx;
                        }
                        /* cols27_data_0028 */
                        cdx = 'cols' + record.get('cols_idx').toString() +'_data_' + cdx;

                        /* empty field values for new reqeust mode */
        //                 storeObj[cdx] = '';
                        /* save cols_infos into Array to use at Editmode */
                        subColsIdxs.push(cdx);
                        /* update cols_idx for each sub-fields to new naming */
                        tmpItem[j-1].cols_idx = cdx;
                        /* build grid columns */
                        var clm = Ext.create('Ext.grid.column.Column' ,{
                            text:colsInfo.cols_name,
                            dataIndex:cdx,
                            height:25,
                            flex:1,
                            editor: {
                                xtype: 'textfield',
                                ctype:colsInfo.cols_type
                            }
                        });
                        if(colsInfo.cols_type == 'date'){
                            clm = Ext.create('Ext.grid.column.Date', {
                                text:colsData[i][j].cols_name,
                                height:25,
                                flex:1,
                                dataIndex:cdx,
                                format:'Y/m/d',
                                editor: {
                                    xtype: 'datefield',
                                    ctype:colsInfo.cols_type
                                }
                            });
                        }
                        if(colsInfo.cols_type == 'radio' || colsInfo.cols_type == 'select'){
                            clm = Ext.create('Ext.grid.column.Column', {
                                text:colsInfo.cols_name,
                                dataIndex:cdx,
                                height:25,
                                flex:1,
                                editor: {
                                    xtype: 'combo',
                                    ctype:colsInfo.cols_type,
                                    store:colsInfo.cols_data
                                }
                            });
                        }
                        var fld = {
                            name:cdx
                        };

                        /* grid columns */
                        clms.push(clm);
                        /* store fields */
                        flds.push(fld);
                    }
                }
            }
        }


        var aStore = Ext.create('Ext.data.Store', {
            fields:flds
        });

        if(isEditMode){
            var cInfo = [];
            for(i=0; i<colsData.length; i++){
                var storeObj = {};
                if(i === 0){//get and save cals_info from header
                    var tmpItem = colsData[i].slice(); // slice to keep original item properties
                    tmpItem.shift();
                    cInfo = tmpItem;
                }
                if(i > 0){//from next of header
                    for(var j=0; j<colsData[i].length; j++){
                        if(j === 0){
                            storeObj.subIdx = colsData[i][j];
                        }
                        else{
                            storeObj[subColsIdxs[j-1]] = colsData[i][j];
                        }
                    }
                    storeObj.cols_info = cInfo;
                    storeData.push(storeObj);
                }
            }
            aStore.setData(storeData);
        }
        /* apply storeObj if only it is new request mode to make just 1 coloum */
        else{
            var emptyData = {subIdx:''};
            for(i=0; i<grid.colsInfo.length; i++){
                if(grid.colsInfo[i].cols_type != 'date')
                    emptyData[grid.colsInfo[i].cols_idx] = '';
            }
            aStore.insert(0, emptyData);
        }

        grid.setColumns(clms);
        grid.setMargin('5 0 0 0');
        grid.dataIdx = fIdx;
        grid.reconfigure(aStore);
        grid.on('cellclick', function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts){
            if(cellIndex === 0 ) return;//for selectionModel
            //extract data from selected cell
            var cellInfo = grid.colsInfo[cellIndex-1];
            var cType= cellInfo.cols_type;
            var cName = cellInfo.cols_name;
            if(cType == 'dbl_select'){
                /* show multi select window */
                var dblSelecWin = Ext.create(appName + '.view.MultiSelectWindow', {
                    title:cName,
                    modal:true,
                    alwaysOnTop:true
                });

                dblSelecWin.down('#valueField').setValue(record.get(cellInfo.cols_idx));

                //store for first option
                var sData = [];
                for(i=0; i<cellInfo.cols_data.length; i++){
                    var dblColsData = cellInfo.cols_data[i];
                    sData.push({'name':dblColsData.data, 'subData':dblColsData.subdata});
                }
        //         Ext.Array.each(cellInfo.cols_data, function(item, index){
        //             sData.push({'name':item.data, 'subData':item.subdata});
        //         });
                //store for #firstOption
                var store = Ext.create('Ext.data.Store', {
                    fields:['name', 'subData'],
                    data : sData
                });

                dblSelecWin.setFirstStore(store);
                dblSelecWin.show();
                dblSelecWin.on('close', function(){
                    if(dblSelecWin.getTitle() === ''){//title is empty means it has new data when btnOk click
                        var valFld = dblSelecWin.down('#valueField');
                        var store = grid.getStore();
                        record.set(cellInfo.cols_idx, valFld.getValue());
                        grid.getView().refresh();
                    }
                    else{
                        dblSelecWin.down('#valueField').setValue('');
                    }
                });
            }
            if(cType == 'check'){
                var chkFldWin = Ext.create('Ext.window.Window',{
                    title:cName,
                    modal:true,
                    width:420,
                    alwaysOnTop:true,
                    bodyStyle:'padding:20px',
                    items:[
                        {
                            xtype:'checkboxgroup',
                            columns:2,
                            itemId:'chkGrp',
                            fieldLabel:cName,
                            width:'100%'
                        },
                        {
                            xtype:'container',
                            layout:{
                                type:'hbox',
                                pack:'center'
                            },
                            width:'100%',
                            margin:'12 0 0 0',
                            items:[
                                {
                                    xtype: 'button',
                                    itemId: 'btnOk',
                                    width: 80,
                                    bind: {
                                        text: '{ok}'
                                    },
                                    listeners:{
                                        click:function(button){
                                            var win = button.up('window');
                                            var cg = win.down('checkboxgroup');
                                            var store = grid.getStore();
                                            var cgVal = cg.getValue();
                                            Ext.Object.each(cgVal, function(key, item){
                                                record.set(cellInfo.cols_idx, item);
                                            });
                                            win.close();
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    itemId: 'btnCancel',
                                    margin: '0 0 0 10',
                                    width: 80,
                                    bind: {
                                        text: '{cancel}'
                                    },
                                    listeners: {
                                        click: function(button){
                                            button.up('window').close();
                                        }
                                    }
                                }
                            ]

                        }
                    ],
                    addContent:function(chkInfo){
                        var chkData = cellInfo.cols_data;
                        var preVal = record.get(cellInfo.cols_idx);
                        var cg = this.down('#chkGrp');
                        for(i=0; i<chkData.length; i++){
                            chkData[i] = chkData[i].trim();
                            var val = false;
                            var cbArr = preVal.toString().split(',');
                            for(j=0; j<cbArr.length; j++){
                                cbArr[j] = cbArr[j].trim();
                            }
                            /* in edit mode */
                            if(Ext.Array.contains(cbArr, chkData[i])) val = true;
                            var mgn = (index % 2 === 1)? '0 0 0 5' : '0 0 0 0';
                            var chk = {
                                boxLabel:chkData[i],
                                name:fIdx,
                                margin:mgn,
                                inputValue:chkData[i],
                                value:val
                            };
                            cg.add(chk);
                        }
        //                 Ext.Array.each(chkData, function(item, index){
        //                     item = item.trim();
        //                     var val = false;
        //                     var cbArr = preVal.toString().split(',');
        //                     for(j=0; j<cbArr.length; j++){
        //                         cbArr[j] = cbArr[j].trim();
        //                     }
        //                     /* in edit mode */
        //                     if(Ext.Array.contains(cbArr, item)) val = true;
        //                     var mgn = (index % 2 === 1)? '0 0 0 5' : '0 0 0 0';
        //                     var chk = {
        //                         boxLabel:item,
        //                         name:fIdx,
        //                         margin:mgn,
        //                         inputValue:item,
        //                         value:val
        //                     };
        //                     cg.add(chk);
        //                 });
                    }
                }).show();
                chkFldWin.addContent(cellInfo.cols_data);
            }
        });

        target.add(dsetCon);
        target.add({xtype:'formspacer'});
    },

    postRequest: function(win) {
        var me = this;
        var url = getUpdateApi();
        var form = win.down('form');

        /* extract link fields from request panel */
        var lnkFlds = Ext.ComponentQuery.query('linkeddata', form);
        if(lnkFlds !== null && lnkFlds.length > 0){
            Ext.Array.each(lnkFlds, function(field){
                /* linkUnitCon created at setCustomFields() */
                var target = field.down('#' + field.getItemId() + '_unitCon');
                /* itemid of linkUnitCon*/
                var targetId = target.getItemId();
                /* hidden field to upload automatically by form */
                var hdnFld = field.down('hiddenfield');
                var items = target.items.items;
                var linkVal = '';
                Ext.Array.each(items, function(item, index){
                    if(index === 0){
                        linkVal += item.bd_idx;
                    }
                    else{
                        linkVal += ', ' + item.bd_idx;
                    }
                });
                hdnFld.setValue(linkVal);
            });
        }

        var frame = Ext.getBody().createChild({
            tag:'iframe',
            cls:'x-hidden',
            id:'iFrame',
            name:'iframe',
            isReady:false
        });

        frame.isReady = false;

        var onUploadComplete = function(form){
            form.unmask();
            /* refresh grid by reloading dStore */
            var dStore = Ext.getStore('dStore_' + selectedCategory);
            dStore.on('load', function onDstoreLoad(){
                dStore.un('load', onDstoreLoad);
                if(form.selectedIndex > -1){//at editmode
                    var grid = Ext.getCmp('mainGrid_' + selectedCategory);
                    var newRec = dStore.getAt(form.selectedIndex);
                    //keep grid selection
                    grid.getSelectionModel().select(newRec);
                    //update viewer
                    getController('Main').viewDocument(newRec.get('ca_id'), newRec.get('bd_idx'));
                }
            });
            var removeCom = function(){
                if(win !== undefined){
                    Ext.toast(locale.upload.posted);
                    win.destroy();
                }
                Ext.MessageBox.hide();
            };

            dStore.load();
            frame.isLoaded = true;
            frame.destroy();
            removeCom();

        };

        // check if uploading complete
        frame.dom.onload = function (){
            if(isHtml5() && getIEVersion() > 9){
                console.log(form);
                onUploadComplete(form);
            }
            else{
                if(!frame.isReady){
                    frame.isReady = true;
                }
                else{
                    onUploadComplete(form);
                }
            }

        };

        if(form.isValid()){
            var submitObj = {};
            submitObj.ca_id =  selectedCategory;
            submitObj.bd_group = 1;
            submitObj.callback = 'callback';

            /* in case grids insise of form */
            var dsetGrids = Ext.ComponentQuery.query('datasetgridbox gridpanel');
            /* if dataset field exists, get values from each dataset field */
            var datasetParams = {};
            Ext.Array.each(dsetGrids, function(entry, index){
                var idx = entry.dataIdx;
                var dsetStore = entry.getStore();
                var idxVal = '';
                dsetStore.each(function(rec, index){
                    Ext.Object.each(rec.data, function(key, val){
                        if(Ext.isDate(val)){
                            var dtForm = (localLanguage == 'Korean')? 'Y/m/d' : 'm/d/Y';
                            val = Ext.util.Format.date(val, dtForm);
                        }
                        if(key != 'id' && key != 'subIdx'){
                            if(submitObj[key + '_' + index] === undefined || submitObj[key + '_' + index] === ''){
                                submitObj[key + '_' + index]= val;
                            }
                            else{
                                submitObj[key + '_' + index] += ',' +  val;
                            }
                        }
                        /* sub category */
                        if(key === 'subIdx'){
                            idxVal += val + ', ';
                            submitObj[idx] = idxVal.slice(0, idxVal.length - 2);
                        }
                    });
                });
                if(index === 0){
        //             console.log(submitObj);
                }
            });

            var atcCon = form.down('#attachCon');
            var existFilesCon = form.down('#existFilesCon');
            var preFileLen = existFilesCon.attachedfileLength;
            /* in case selected file grid is not ready */
            submitObj.fileCount = preFileLen;

            var delEntry = existFilesCon.delEntry;
            /* remove selected exist file(s) */
            Ext.Array.each(delEntry, function(entry, index){
                submitObj['file_del_' + entry] = 1;
            });

            if(isHtml5() && getIEVersion() > 9){
                var fd = new FormData();
                submitObj.bd_idx = form.down('#bdIdx').getValue();
                var values = form.getValues();
                var fileCon = atcCon.down('#selectedFilesCon');
                /* if attached file exist */
                if(fileCon.down('grid')){
                    var store = fileCon.down('grid').getStore();
                    submitObj.fileCount = store.getCount() + preFileLen;
                    if(store.getCount() > 0){
                        var pb = Ext.create('Ext.ProgressBar', {
                            width: 300,
                            dock:'bottom'
                        });

                        pb.wait({
                            interval: 500, //bar will move fast!
                            duration: 5000000,
                            increment: 15,
                            width:'80%',
                            text:locale.upload.pleaseWait,
                            scope: this,
                            fn: function(){
                                pb.updateText('Done!');
                            }
                        });
                        win.addDocked(pb);
                    }
                    store.each(function(record, index){
                        submitObj['file_' + (index + preFileLen).toString()] = record.get('file');
                    });
                }
                Ext.Object.each(values, function(key, value){
                    if(key != 'files'){
                        submitObj[key] = value;
                    }
                });
                /* for basic params */
                Ext.Object.each(submitObj, function(key, value){
                    fd.append(key, value);
                });

                var request = new XMLHttpRequest();
                request.open('POST', url);
                request.onload = function(){
                    if(request.status == 200){
                        onUploadComplete(form);
                    }
                    else{
                        alert('Error " + oReq.status + " occurred when trying to upload your file.<br \/>');
                    }
                };
                request.send(fd);
            }
            else{
                form.mask();
                /* uploading files */
                atcFiles = Ext.ComponentQuery.query('filefield', atcCon);
                submitObj.fileCount = atcFiles.length + preFileLen;
                Ext.Object.each(submitObj, function(key, value){
                    form.baseParams[key] = value;
                });
                form.submit(
                    {
                        url:url,
                        target:'iframe',
                        waitMsg:locale.upload.pleaseWait,
                        success:function(){

                        },
                        callback:function(){

                        }
                    }
                );
            }
        }
        else{
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    delAttachedFile: function(div) {
        var editWin = Ext.getCmp('editRequestWin_' + selectedCategory);
        var existFilesCon = editWin.down('#existFilesCon');
        var index = div.id.split('_')[1];
        existFilesCon.delEntry.push(index);
        Ext.get(div).destroy();
    }

});
