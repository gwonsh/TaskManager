/*
 * File: app/controller/Viewer.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TaskManager.controller.Viewer', {
    extend: 'Ext.app.Controller',

    refs: {
        viewPan: '#viewPan'
    },

    control: {
        "#viewer": {
            afterlayout: 'onViewerAfterLayout'
        }
    },

    onViewerAfterLayout: function(container, layout, eOpts) {
        var me = this;
        var vPan = me.getViewPan();
        var viewer = vPan.down('viewer');
        var fStore = Ext.getStore('fStore_' + viewer.categoryId);
        /* when click main image in design mode*/
        var image = container.el.select('.div-image').elements[0];
        if(Ext.get(image)){
            Ext.get(image).on('dblclick', function(dsn){
                //         console.log(dsn);
            });

        }
        /* when click the basic data */
        var basicFld = container.el.select('.basic-field');
        Ext.Array.each(basicFld.elements, function(entry){
            Ext.get(entry).on('click', function onFieldClick(e){
                /* check if edit mode activated */
                if(!container.getEditable()) return;
                var target = e.currentTarget;
                /* Editing subject */
                if(target.getAttribute('field_type') == 'subject'){
                    /* stop event prevent for duplicating even though input field added */
                    Ext.get(target).un('click', onFieldClick);
                    me.setInputField(target, onFieldClick);
                }

                /* Editing content by window */
                if(target.getAttribute('field_type') == 'content'){
                    var win = Ext.create('Ext.window.Window', {
                        width:600,
                        height:390,
                        modal:true,
                        ghost:false,
                        items:[
                            {
                                xtype: 'htmleditor',
                                height: 300,
                                style: 'background-color:#ffffff',
                                width: '100%',
                                hideLabel: true,
                                enableFont: false,
                                value:Ext.get(target).dom.innerHTML
                            },
                            {
                                xtype:'container',
                                layout:{
                                    type:'hbox',
                                    pack:'center'
                                },
                                margin:'12 0 0 0',
                                items:[
                                    {
                                        xtype:'button',
                                        width:100,
                                        text:locale.menu.edit,
                                        handler:function(){
                                            me.setHtmlEditorField(target, win);
                                        }
                                    },
                                    {
                                        xtype:'button',
                                        width:100,
                                        text:locale.upload.cancel,
                                        margin:'0 0 0 10',
                                        handler:function(){
                                            win.close();
                                        }
                                    }
                                ]
                            }
                        ]
                    });
                    win.show();
                }
            });
        });

        /* when click a custom data */
        var customFld = container.el.select('.custom-field');
        Ext.Array.each(customFld.elements, function(entry){
            Ext.get(entry).on('click', function onCustomFldClick(e){
                target = e.currentTarget;
                if(e.target.getAttribute);
                var attr = target.getAttribute('cols_type');
                var fieldIndex = target.getAttribute('fieldIndex');
                var colsName = target.getAttribute('cols_name');
                var colsData = fStore.getData().items[fieldIndex].get('cols_data');
                var colsIdx = target.getAttribute('cols_idx');
                var bdIdx = target.getAttribute('bd_idx');
                //         var preVal = Ext.get(target).dom.innerHTML;
                var preVal = fStore.getData().items[fieldIndex].get('data_val').toString();
                /* check if edit mode activated */
                if(!container.getEditable()) return;
                if(attr == 'text' || attr == 'dbtext' || attr == 'number' || attr == 'url'){
                    /* stop event prevent for duplicating even though input field added */
                    Ext.get(target).un('click', onCustomFldClick);
                    me.setInputField(target, onCustomFldClick);
                }
                if(attr == 'textarea'){
                    var winTa = Ext.create('Ext.window.Window', {
                        width:600,
                        height:390,
                        modal:true,
                        ghost:false,
                        items:[
                            {
                                xtype: 'htmleditor',
                                height: 300,
                                style: 'background-color:#ffffff',
                                width: '100%',
                                hideLabel: true,
                                enableFont: false,
                                value:preVal
                            },
                            {
                                xtype:'container',
                                layout:{
                                    type:'hbox',
                                    pack:'center'
                                },
                                margin:'12 0 0 0',
                                items:[
                                    {
                                        xtype:'button',
                                        width:100,
                                        text:locale.menu.update,
                                        handler:function(){
                                            me.setHtmlEditorField(target, winTa);
                                        }
                                    },
                                    {
                                        xtype:'button',
                                        width:100,
                                        text:locale.upload.cancel,
                                        margin:'0 0 0 10',
                                        handler:function(){
                                            winTa.close();
                                        }
                                    }
                                ]
                            }
                        ]
                    });
                    winTa.show();
                }
                if(attr == 'date'){
                    var winDate = Ext.create('Ext.window.Window', {
                        width:215,
                        modal:true,
                        bodyStyle:'padding:20px',
                        ghost:false,
                        title:colsName,
                        items:[
                            {
                                xtype:'datefield',
                                margin:'8 0 0 0',
                                listeners:{
                                    render:function(df){
                                        df.setValue(preVal);
                                        df.inputEl.on('keyup', function(e){
                                            if(e.keyCode == 13){
                                                var dtForm = (localLanguage == 'Korean')? 'Y/m/d' : 'm/d/Y';
                                                var val = Ext.util.Format.date(e.target.value, dtForm);
                                                fStore.getData().items[fieldIndex].set('data_val', val);
                                                me.setQuery(target, val, winDate);
                                            }
                                        });
                                    }
                                }
                            },
                            {
                                xtype:'button',
                                text:locale.menu.update,
                                margin:'20 0 0 45',
                                width:80,
                                handler:function(){
                                    var dtForm = (localLanguage == 'Korean')? 'Y/m/d' : 'm/d/Y';
                                    var val = Ext.util.Format.date(winDate.down('datefield').getValue(), dtForm);
                                    fStore.getData().items[fieldIndex].set('data_val', val);
                                    me.setQuery(target, val, winDate);
                                }
                            }
                        ]
                    }).show();
                }
                if(attr == 'select'){
                    var winSelect = Ext.create('Ext.window.Window', {
                        width:215,
                        modal:true,
                        bodyStyle:'padding:20px',
                        ghost:false,
                        title:colsName,
                        items:[
                            {
                                xtype:'combo',
                                margin:'8 0 0 0',
                                store:colsData,
                                value:preVal,
                                listeners:{
                                    render:function(combo){
                                        combo.inputEl.on('keyup', function onComboKeyup(e){
                                            if(e.keyCode == 13){
                                                combo.inputEl.un('keyup', onComboKeyup);
                                                fStore.getData().items[fieldIndex].set('data_val', combo.getValue());
                                                me.setQuery(target, combo.getValue(), winSelect);
                                            }
                                        });
                                    }
                                }
                            },
                            {
                                xtype:'button',
                                text:locale.menu.update,
                                margin:'20 0 0 45',
                                width:80,
                                handler:function(){
                                    var combo = winSelect.down('combo');
                                    fStore.getData().items[fieldIndex].set('data_val', combo.getValue());
                                    me.setQuery(target, combo.getValue(), winSelect);
                                }
                            }
                        ]
                    }).show();
                }
                if(attr == 'radio'){
                    var winRadio = Ext.create('Ext.window.Window', {
                        width:215,
                        modal:true,
                        bodyStyle:'padding:20px',
                        ghost:false,
                        title:colsName,
                        items:[
                            {
                                xtype:'radiogroup',
                                margin:'8 0 0 0',
                                columns:1,
                                listeners:{
                                    render:function(rg){
                                        Ext.Array.each(colsData, function(entry, index){
                                            var isChecked = (entry == preVal)? true : false;
                                            rg.add({name:'rdo_' + colsIdx, boxLabel:entry, inputValue:entry, checked:isChecked});
                                        });
                                    }
                                }
                            },
                            {
                                xtype:'button',
                                text:locale.menu.update,
                                margin:'20 0 0 45',
                                width:80,
                                handler:function(){
                                    var radio = winRadio.down('radiogroup');
                                    var val = radio.getValue()['rdo_'+colsIdx];
                                    fStore.getData().items[fieldIndex].set('data_val', val);
                                    me.setQuery(target, val, winRadio);
                                }
                            }
                        ]
                    }).show();
                }
                if(attr == 'datagrp'){
                    var relatedCategory = target.getAttribute('relatedCategory');
                    var grpVal = target.getAttribute('value');
                    var grpWin = Ext.create(appName + '.view.DataGroupWindow', {
                        relatedCategory:relatedCategory
                    });
                    grpWin.show();
                    var dgGrid = grpWin.down('#dgGrid');
                    dgGrid.on('cellclick', function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts){
                        fStore.getData().items[fieldIndex].set('data_val', record.get('bd_subject'));
                        var query = '?bd_idx=' + bdIdx + '&cols_idx=' + colsIdx + '&data_val=' + record.get('bd_subject');
                        me.setQuery(target, record.get('bd_subject'), grpWin);
                    });
                }
                if(attr == 'check'){
                    var winCheck = Ext.create('Ext.window.Window', {
                        width:215,
                        modal:true,
                        bodyStyle:'padding:20px',
                        ghost:false,
                        title:colsName,
                        items:[
                            {
                                xtype:'checkboxgroup',
                                margin:'8 0 0 0',
                                columns:1,
                                listeners:{
                                    render:function(cg){
                                        Ext.Array.each(colsData, function(entry, index){
                                            entry = entry.trim();
                                            var isChecked = false;
                                            var cbArr = preVal.split(',');
                                            Ext.Array.each(cbArr, function(valItem, index){
                                                cbArr[index] = valItem.trim();
                                            });
                                            if(Ext.Array.contains(cbArr, entry)) isChecked = true;
                                            cg.add({name:'chk_' + colsIdx, boxLabel:entry, inputValue:entry, checked:isChecked});
                                        });
                                    }
                                }
                            },
                            {
                                xtype:'button',
                                text:locale.menu.update,
                                margin:'20 0 0 45',
                                width:80,
                                handler:function(){
                                    var check = winCheck.down('checkboxgroup');
                                    var vals = check.getValue()['chk_'+colsIdx];
                                    var val;
                                    if(Ext.isString(vals)){//선택값이 하나이면 String으로 가져오므로
                                        val = vals;
                                    }
                                    else{
                                        val = vals[0];
                                        Ext.Array.each(vals, function(entry, index){
                                            if(index !== 0){
                                                val += ', ' + vals[index];
                                            }
                                        });
                                    }
                                    fStore.getData().items[fieldIndex].set('data_val', val);
                                    me.setQuery(target, val, winCheck);
                                }
                            }
                        ]
                    }).show();
                }
                if(attr == 'dbl_select'){
                    /* Array data for the first combobox */
                    var fstData = [];
                    Ext.Array.each(colsData, function(item){
                        fstData.push({name:item.data, subData:item.subdata});
                    });
                    /* store for the first combobox */
                    var fstStore = Ext.create('Ext.data.Store', {
                        fields:['name', 'subData'],
                        data : fstData
                    });
                    /* show multi select window */
                    var dblSelecCon= Ext.create(appName + '.view.MultiSelectWindow', {
                        title:colsName,
                        modal:true,
                        alwaysOnTop:true
                    });

                    /* value field in MultiSelectWindow */
                    var valFld = dblSelecCon.down('#valueField');
                    /* fill given value to value field */
                    valFld.setValue(preVal);
                    /* connect store to first select option */
                    dblSelecCon.setFirstStore(fstStore);
                    dblSelecCon.show();
                    dblSelecCon.on('close', function(){
                        if(dblSelecCon.getTitle() === ''){//empty title means it has new data when btnOk click
                            var val = valFld.getValue();
                            fStore.getData().items[fieldIndex].set('data_val', val);
                            me.setQuery(target, val, winCheck);
                        }
                        else{//existing title means click 'cancel' or 'close' button
                            dblSelecCon.down('#valueField').setValue('');
                        }
                    });
                }
                if(attr == 'color'){
                    var winColor = Ext.create('Ext.window.Window',{
                        modal:true,
                        bodyStyle:'padding:20px',
                        ghost:false,
                        title:colsName,
                        items:[
                            {
                                xtype:'colorpicker',
                                listeners:{
                                    select:function( picker, color, eOpts){
                                        var val = '#' + color;
                                        var query = '?bd_idx=' + bdIdx + '&cols_idx=' + colsIdx + '&data_val=' + encodeURIComponent(val);
                                        fStore.getData().items[fieldIndex].set('data_val', val);
                                        me.updateCellValue(query, winColor);
                                        Ext.get(target).dom.innerHTML = '<div style="width:15px;height:15px;background-color:'+val+'"></div>';
                                    }
                                }
                            }
                        ]
                    }).show();
                }
                if(attr == 'color256'){
                    var win256 = Ext.create('Ext.window.Window',{
                        modal:true,
                        bodyStyle:'padding:20px',
                        width:234,
                        ghost:false,
                        title:colsName,
                        items:[
                            {
                                xtype:'colorpicker',
                                listeners:{
                                    select:function( picker, color, eOpts){
                                        var val = '#' + color;
                                        var chip = {
                                            xtype:'container',
                                            width:30,
                                            height:30,
                                            value:val,
                                            cls:'color-chip',
                                            margin:'0 0 2 2',
                                            style:'float:left;background-color:' + val,
                                            listeners:{
                                                render:function(chip){
                                                    chip.el.on('click', function(){
                                                        chip.destroy();
                                                    });
                                                }
                                            }
                                        };
                                        win256.down('#colorCon').add(chip);
                                    }
                                }
                            },
                            {
                                xtype:'container',
                                width:'100%',
                                height:96,
                                itemId:'colorCon',
                                margin:'10 0 0 0',
                                style:'background-color:#f5f5f5',
                                listeners:{
                                    render:function(comp){
                                        var colors = [];
                                        Ext.Array.each(preVal.split(','), function(item){
                                            colors.push(item.trim());
                                        });
                                        Ext.Array.each(colors, function(color){
                                            var chip = {
                                                xtype:'container',
                                                width:30,
                                                height:30,
                                                value:color,
                                                cls:'color-chip',
                                                margin:'0 0 2 2',
                                                style:'float:left;background-color:' + color,
                                                listeners:{
                                                    render:function(chip){
                                                        chip.el.on('click', function(){
                                                            chip.destroy();
                                                        });
                                                    }
                                                }
                                            };
                                            comp.add(chip);
                                        });
                                    }
                                }
                            },
                            {
                                xtype:'button',
                                text:locale.menu.update,
                                margin:'10 0 0 50',
                                width:80,
                                handler:function(button){
                                    var chips = win256.down('#colorCon').items.items;
                                    var val = encodeURIComponent(chips[0].value);
                                    var html = '';
                                    Ext.Array.each(chips, function(entry, index){
                                        if(index !=- 0){
                                            val += ', ' + encodeURIComponent(entry.value);
                                        }
                                        html += '<div style="float:left;width:15px;height:15px;background-color:'+entry.value+'"></div>';
                                    });
                                    var query = '?bd_idx=' + bdIdx + '&cols_idx=' + colsIdx + '&data_val=' + val;
                                    fStore.getData().items[fieldIndex].set('data_val', val);
                                    me.updateCellValue(query, win256);
                                    Ext.get(target).dom.innerHTML = html;
                                }
                            }
                        ]
                    }).show();
                }
                if(attr == 'colorchk'){
                    var winCC = Ext.create('Ext.window.Window', {
                        width:215,
                        modal:true,
                        bodyStyle:'padding:20px',
                        ghost:false,
                        title:colsName,
                        items:[
                            {
                                xtype:'checkboxgroup',
                                margin:'8 0 0 0',
                                columns:1,
                                listeners:{
                                    render:function(cg){
                                        Ext.Array.each(colsData, function(entry, index){
                                            var isChecked = false;
                                            var preArr = preVal.split(',');
                                            Ext.Array.each(preArr, function(item, index){
                                                preArr[index] = item.trim();
                                            });
                                            if(Ext.Array.contains(preArr, entry[2])) isChecked = true;

                                            cg.add(
                                                {
                                                    name:'chk_' + colsIdx,
                                                    boxLabel:entry[2].split('||')[1],
                                                    inputValue:entry[2],
                                                    checked:isChecked,
                                                    beforeLabelTpl :[
                                                        '<div style="float:left;width:14px;height:14px;margin-top:6px;background-color:'+entry[2].split('||')[0]+'"></div>'
                                                    ],
                                                }
                                            );

                                        });
                                    }
                                }
                            },
                            {
                                xtype:'button',
                                text:locale.menu.update,
                                margin:'20 0 0 45',
                                width:80,
                                handler:function(){
                                    var check = winCC.down('checkboxgroup');
                                    var vals = check.getValue()['chk_'+colsIdx];

                                    var val;
                                    if(Ext.isString(vals)){//선택값이 하나이면 String으로 가져오므로
                                        val = vals;
                                    }
                                    else{
                                        val = vals[0];
                                        Ext.Array.each(vals, function(entry, index){
                                            if(index !== 0){
                                                val += ', ' + vals[index];
                                            }
                                        });
                                    }
                                    Ext.get(target).dom.innerHTML = me.getColorradio(val);
                                    var query = '?bd_idx=' + bdIdx + '&cols_idx=' + colsIdx + '&data_val=' + encodeURIComponent(val);
                                    fStore.getData().items[fieldIndex].set('data_val', val);
                                    me.updateCellValue(query, winCC);
                                }
                            }
                        ]
                    }).show();
                }
                if(attr == 'link'){
                    var lnkWin = Ext.create(appName + '.view.LinkingWindow', {

                    });
                    lnkWin.on('show', function(lw){
                        if(preVal.length === 0) return;
                        var lnkData = preVal.split(',');
                        Ext.Array.each(lnkData, function(item){
                            /* get information of each data in link from server */
                            Ext.data.JsonP.request({
                                url:getDataWriteApi() + '?bd_idx=' + item.trim(),
                                success:function(response){
                                    if(!response.binderBean.bd_file) return;
                                    var path = 'resources/images/ico_noimage.gif';
                                    if(response.binderBean.bd_file.length > 0){
                                        path = response.binderBean.bd_file[0].thumb_path;
                                    }
                                    var unit = Ext.create(appName + '.view.LinkUnit', {
                                        bd_idx:response.binderBean.bd_idx,
                                        itemId:'unit_' + response.binderBean.bd_idx
                                    });
                                    unit.down('#image').setStyle('background-image', 'url('+ path + ')');
                                    unit.getViewModel().setData({
                                        unitTitle:response.binderBean.bd_subject,
                                        src:path
                                    });
                                    var dropBox = lnkWin.down('#dropBox');
                                    dropBox.add(unit);
                                }
                            });
                        });
                    });
                    lnkWin.show();
                    lnkWin.on('save', function(win){
                        var dropBox = lnkWin.down('#dropBox');
                        var val = '';
                        if(dropBox.getLinkData().length > 0){
                            val = dropBox.getLinkData()[0].bd_idx;
                        }

                        for (var i=dropBox.getLinkData().length; i--; ){
                            if(i !== 0){
                                val += ', ' + dropBox.getLinkData()[i].bd_idx;
                            }
                        }
                        /* update html to viewer */
                        var html = '<div style="width:100%">';
                        for(i=0; i<dropBox.getLinkData().length; i++){
                            var url = domain + '/thumb/' + dropBox.getLinkData()[i].bd_idx + '/0/T';
                            html += '<div class="viewer-link" style="background:URL('+url+')"></div>';
                        }
                        html += '</div>';

                        Ext.get(target).dom.innerHTML = html;
                        var query = '?bd_idx=' + bdIdx + '&cols_idx=' + colsIdx + '&data_val=' + val;
                        fStore.getData().items[fieldIndex].set('data_val', val);
                        me.updateCellValue(query, lnkWin);
                    });
                }
                if(attr == 'dataset'){
                    var dsetCon = Ext.create(appName + '.view.DatasetGridBox', {
                        style:'margin-bottom:10px',
                        cls:'requestform-space'
                    });
                    var winDset = Ext.create('Ext.window.Window',{
                        modal:true,
                        bodyStyle:'padding:20px',
                        width:810,
                        ghost:false,
                        title:colsName
                    }).show();
                    var grid = dsetCon.getGrid();
                    grid.dataIdx = 'data_' + colsIdx;
                    dsetCon.addTitle(colsName + ':');

                    /* data for store in grid */
                    var storeData = [];
                    /* colums for grid according to sub-fields */
                    var clms = [];
                    /* model fields for store */
                    /* cols_info is a preset fields to be used by edit(specially dbl_select) */
                    var flds = [{name:'cols_info'}, {name:'subIdx'}];
                    /* idx of sub-fields */
                    var subColsIdxs = [];
                    /* generate infomarion each column */
                    var subColsInfos = [];

                    Ext.Array.each(colsData, function(item, index){
                        /* object item for storeData */
                        /* [{name:'cols_info'}, {name:'cdx'}] */
                        var storeObj = {};
                        if(index === 0){// for header
                            var tmpItem = item.slice(); // slice to keep original item properties
                            tmpItem.shift();
                            grid.colsInfo = tmpItem;
                            /* valiItem:sub-fields information that is included cols_name, cols_idx and cols_type */
                            Ext.Array.each(item, function(valItem, index){
                                var i;
                                /* arrange sub-fields into storeObj */
                                if(index > 0){
                                    /* generate cell dataindex */
                                    var cdx = valItem.cols_idx.toString();

                                    if(cdx.length == 1){
                                        cdx = '000' + cdx;
                                    }
                                    if(cdx.length == 2){
                                        cdx = '00' + cdx;
                                    }
                                    if(cdx.length == 3){
                                        cdx = '0' + cdx;
                                    }
                                    /* cols27_data_0028 */
                                    cdx = 'cols' + colsIdx.toString() +'_data_' + cdx;

                                    /* empty field values for new reqeust mode */
                                    storeObj[cdx] = '';
                                    /* save cols_infos into Array to use at Editmode */
                                    subColsIdxs.push(cdx);
                                    /* update cols_idx for each sub-fields to new naming */
                                    tmpItem[index-1].cols_idx = cdx;
                                    /* build grid columns */
                                    var clm = Ext.create('Ext.grid.column.Column' ,{
                                        text:valItem.cols_name,
                                        dataIndex:cdx,
                                        height:25,
                                        flex:1,
                                        editor: {
                                            xtype: 'textfield',
                                            ctype:valItem.cols_type
                                        }
                                    });
                                    if(valItem.cols_type == 'date'){
                                        clm = Ext.create('Ext.grid.column.Date', {
                                            text:valItem.cols_name,
                                            height:25,
                                            flex:1,
                                            dataIndex:cdx,
                                            format:'Y/m/d',
                                            editor: {
                                                xtype: 'datefield',
                                                ctype:valItem.cols_type
                                            }
                                        });
                                    }
                                    if(valItem.cols_type == 'radio' || valItem.cols_type == 'select'){
                                        clm = Ext.create('Ext.grid.column.Column', {
                                            text:valItem.cols_name,
                                            dataIndex:cdx,
                                            height:25,
                                            flex:1,
                                            editor: {
                                                xtype: 'combo',
                                                ctype:valItem.cols_type,
                                                store:valItem.cols_data
                                            }
                                        });
                                    }
                                    var fld = {
                                        name:cdx
                                    };

                                    /* grid columns */
                                    clms.push(clm);
                                    /* store fields */
                                    flds.push(fld);
                                }
                            });
                        }
                    });
                    var cInfo = [];
                    Ext.Array.each(colsData, function(item, index){
                        var storeObj = {};
                        if(index === 0){//get and save cals_info from header
                            var tmpItem = item.slice(); // slice to keep original item properties
                            tmpItem.shift();
                            cInfo = tmpItem;
                        }
                        if(index > 0){//from next of header
                            for(var i=0; i<item.length; i++){
                                if(i === 0){
                                    storeObj.subIdx = item[i];
                                }
                                else{
                                    storeObj[subColsIdxs[i-1]] = item[i];
                                }
                            }
                            storeObj.cols_info = cInfo;
                            storeData.push(storeObj);
                        }
                    });
                    var aStore = Ext.create('Ext.data.Store', {
                        fields:flds,
                        data:storeData
                    });
                    grid.setColumns(clms);
                    grid.setMargin('5 0 0 0');
                    grid.reconfigure(aStore);
                    grid.on('cellclick', function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts){
                        if(cellIndex === 0) return;
                        /* extract data from selected cell */
                        var cellInfo = grid.colsInfo[cellIndex-1];
                        var cType= cellInfo.cols_type;
                        var cName = cellInfo.cols_name;
                        if(cType == 'dbl_select'){
                            /* show multi select window */
                            var dblSelecWin = Ext.create(appName + '.view.MultiSelectWindow', {
                                title:cName,
                                modal:true,
                                alwaysOnTop:true
                            });

                            dblSelecWin.down('#valueField').setValue(record.get(cellInfo.cols_idx));

                            /* store for first option */
                            var sData = [];
                            Ext.Array.each(cellInfo.cols_data, function(item, index){
                                sData.push({'name':item.data, 'subData':item.subdata});
                            });
                            /* store for #firstOption */
                            var store = Ext.create('Ext.data.Store', {
                                fields:['name', 'subData'],
                                data : sData
                            });

                            dblSelecWin.setFirstStore(store);
                            dblSelecWin.show();
                            dblSelecWin.on('close', function(){
                                if(dblSelecWin.getTitle() === ''){//title is empty means it has new data when btnOk click
                                    var valFld = dblSelecWin.down('#valueField');
                                    var store = grid.getStore();
                                    record.set(cellInfo.cols_idx, valFld.getValue());
                                    grid.getView().refresh();
                                }
                                else{
                                    dblSelecWin.down('#valueField').setValue('');
                                }
                            });
                        }

                        if(cType == 'check'){
                            var chkFldWin = Ext.create('Ext.window.Window',{
                                title:cName,
                                modal:true,
                                width:420,
                                alwaysOnTop:true,
                                bodyStyle:'padding:20px',
                                items:[
                                    {
                                        xtype:'checkboxgroup',
                                        columns:2,
                                        itemId:'chkGrp',
                                        fieldLabel:cName,
                                        width:'100%',
                                    },
                                    {
                                        xtype:'container',
                                        layout:{
                                            type:'hbox',
                                            pack:'center'
                                        },
                                        width:'100%',
                                        margin:'12 0 0 0',
                                        items:[
                                            {
                                                xtype: 'button',
                                                itemId: 'btnOk',
                                                width: 80,
                                                bind: {
                                                    text: '{ok}'
                                                },
                                                listeners:{
                                                    click:function(button){
                                                        var win = button.up('window');
                                                        var cg = win.down('checkboxgroup');
                                                        var store = grid.getStore();
                                                        var cgVal = cg.getValue();
                                                        var value = '';
                                                        Ext.Object.each(cgVal, function(key, item){
                                                            value += ',' + item;
                                                        });
                                                        record.set(cellInfo.cols_idx, value.slice(1, value.length));
                                                        win.close();
                                                    }
                                                }
                                            },
                                            {
                                                xtype: 'button',
                                                itemId: 'btnCancel',
                                                margin: '0 0 0 10',
                                                width: 80,
                                                bind: {
                                                    text: '{cancel}'
                                                },
                                                listeners: {
                                                    click: function(button){
                                                        button.up('window').close();
                                                    }
                                                }
                                            }
                                        ]

                                    }
                                ],
                                addContent:function(chkInfo){
                                    var chkData = cellInfo.cols_data;
                                    var preVal = record.get(cellInfo.cols_idx);
                                    var cg = this.down('#chkGrp');
                                    Ext.Array.each(chkData, function(item, index){
                                        item = item.trim();
                                        var val = false;
                                        var cbArr = preVal.toString().split(',');
                                        Ext.Array.each(cbArr, function(valItem, index){
                                            cbArr[index] = valItem.trim();
                                        });

                                        /* in edit mode */
                                        if(Ext.Array.contains(cbArr, item)) val = true;
                                        var mgn = (index % 2 === 1)? '0 0 0 5' : '0 0 0 0';
                                        var chk = {
                                            boxLabel:item,
                                            margin:mgn,
                                            inputValue:item,
                                            value:val
                                        };
                                        cg.add(chk);
                                    });
                                }
                            }).show();
                            chkFldWin.addContent(cellInfo.cols_data);
                        }
                    });
                    winDset.add(dsetCon);
                    var saveBtn = {
                        xtype:'button',
                        text:locale.menu.update,
                        width:80,
                        style:'margin:0 auto',
                        handler:function(button){
                            /* in case grids insise of form */
                            /* if dataset field exists, get values from each dataset field */
                            /* id of dataset field */
                            var idx = grid.dataIdx;
                            /* store in dataset grid */
                            var dsetStore = grid.getStore();
                            //     var subIdxs = grid.subIdxs;
                            var idxVal = '';

        //                     var submitObj = {};
        //                     submitObj.cols_idx = colsIdx;
        //                     submitObj.bd_idx = bdIdx;
        //                     dsetStore.each(function(rec, index){
        //                         Ext.Object.each(rec.data, function(key, val){
        //                             if(Ext.isDate(val)){
        //                                 var dtForm = (localLanguage == 'Korean')? 'Y/m/d' : 'm/d/Y';
        //                                 val = Ext.util.Format.date(val, dtForm);
        //                             }
        //                             if(key != 'id' && key != 'subIdx' && key != 'cols_info'){
        //                                 if(submitObj[key + '_' + index] === undefined || submitObj[key + '_' + index] === ''){
        //                                     submitObj[key + '_' + index]= val;
        //                                 }
        //                                 else{
        //                                     submitObj[key + '_' + index] += ',' +  val;
        //                                 }
        //                             }
        //                             /* sub category */
        //                             if(key === 'subIdx'){
        //                                 idxVal += val + ', ';
        //                                 submitObj[idx] = idxVal.slice(0, idxVal.length - 2);
        //                             }
        //                         });
        //                     });
        //                     me.updateDatasetValue(submitObj, target, winDset);
                            /* set parameters for each sub field */
                            var params = [];
                            params.cols_idx = colsIdx;
                            params.bd_idx = bdIdx;
                            aStore.each(function(record, index){

                                Ext.Object.each(record.data, function(key, val){
                                    /* for Date value change to short format */
                                    if(Ext.isDate(val)){
                                        var dtForm = (localLanguage == 'Korean')? 'Y/m/d' : 'm/d/Y';
                                        val = Ext.util.Format.date(val, dtForm);
                                    }
                                    if(key != 'id' && key != 'subIdx'){
                                        if(params[key + '_' + index] === undefined || params[key + '_' + index] === ''){
                                            params[key + '_' + index]= val;
                                        }
                                        else{
                                            params[key + '_' + index] += ',' +  val;
                                        }
                                    }
                                    if(key === 'subIdx'){
                                        idxVal += val + ', ';
                                        params.data_val = idxVal.slice(0, idxVal.length - 2);
                                    }
                                });
                            });
                            me.updateDatasetValue(params, target, winDset);

                        }
                    };
                    winDset.add(saveBtn);
                }

            });
        });

        /* when click on attached */
        var attachFile = container.el.select('.viewer-attach-image');
        Ext.Array.each(attachFile.elements, function(entry){
            var el = Ext.get(entry);
            el.on('click', function(e){
                var oPath = e.currentTarget.getAttribute('viewSrc');
                var dPath = e.currentTarget.getAttribute('downSrc');
                var tPath = e.currentTarget.getAttribute('thumbSrc');
                var filename = e.currentTarget.getAttribute('filename');
                var filesize = e.currentTarget.getAttribute('filesize');
                var pixels = e.currentTarget.getAttribute('pixels');
                var resol = e.currentTarget.getAttribute('resolution');
                var ext = filename.slice(filename.length - 3, filename.length);
                var isImage = false;
                var isTooBig = false;

                if(pixels > 8000 * 8000) isTooBig = true;

                if(ext == 'tif' || ext == 'psd' || ext == 'jpg' || ext == 'pdf' || ext == 'bmp' || ext == 'gif' || ext == 'png'){
                    isImage = true;
                }
                /* window for download or view the attached data */
                var thumbHeight = (resol.split('x')[0] < 100 && resol.split('x')[1] < 100)? resol.split('x')[1] : 100;
                if(!isImage) thumbHeight = 32;
                var confirmWin = Ext.create('Ext.window.Window', {
                    minWidth:300,
                    modal:true,
                    bodyStyle:'padding:20px',
                    ghost:false,
                    layout:{
                        type:'vbox',
                        align:'center'
                    },
                    items:[
                        {
                            xtype:'image',
                            src:tPath,
                            height:thumbHeight
                        },
                        {
                            xtype:'label',
                            text:filename,
                            style:'font-size:11px;color:#555555'
                        },
                        {
                            xtype:'container',
                            layout:{
                                type:'hbox',
                            },
                            itemId:'btnCon',
                            margin:'10 0 0 0',
                        }
                    ]
                }).show();
                /* view file in case of image*/
                var viewBtn = {
                    /* show image button */
                    xtype:'button',
                    text:locale.main.showImage,
                    width:100,
                    handler:function(){
                        var win = window.open('','imageView');
                        if(isTooBig){
                            win.document.write('<img src="' + tPath + '/M"/>');
                            Ext.toast(locale.upload.imageTooBig);
                        }
                        else{
                            win.document.write('<img src="' + oPath + '"/>');
                        }
                    }
                };
                /* download file */
                var downBtn = {
                    /* download button */
                    xtype:'button',
                    text:locale.main.download,
                    margin:'0 0 0 10',
                    width:100,
                    handler:function(){
                        window.location.href = domain + '/' + dPath;
                        confirmWin.close();
                    }
                };

                var btnCon = confirmWin.down('#btnCon');
                btnCon.add(downBtn);
                if(isImage){
                    btnCon.insert(0, viewBtn);
                }
            });
        });
    },

    editModeToggle: function(icon) {
        var vPan = this.getViewPan();
        var viewer = vPan.down('#viewer');
        if(!viewer){
            alert(locale.upload.noneSelected);
            return;
        }
        var cfEls = viewer.el.select('.custom-field').elements;
        var bsEls = viewer.el.select('.basic-field').elements;
        var els = Ext.Array.merge(cfEls, bsEls);

        if(!viewer.getEditable()){
            viewer.setEditable(true);
            icon.src = 'resources/images/ico_unlock.png';
            Ext.toast(locale.menu.isEditable);
            Ext.Array.each(els, function(entry){
                Ext.get(entry).setStyle('background-color', '#f5f9fd');
            });
        }
        else{
            viewer.setEditable(false);
            icon.src = 'resources/images/ico_lock.png';
            Ext.toast(locale.menu.uneditable);
            Ext.Array.each(els, function(entry){
                Ext.get(entry).setStyle('background-color', 'white');
            });
        }
    },

    generateHtml: function(values, type, header) {
        var me = this;
        var subjectAttr = ' class="basic-field" field_type="subject" bd_idx="'+values.bd_idx+'"';
        var contentAttr = ' class="basic-field" field_type="content" bd_idx="'+values.bd_idx+'"';
        var html;
        if(type == 'Default'){
            html  =  '<div class="viewer-frame">';
            if(header === undefined || header === true){
            /* header */
            html +=		 '<div class="viewer-header">';
                if(values.companyInfo !== undefined){
                html += 	 	 '<img src="'+values.companyInfo.company_logo+'" class="viewer-logo">';
                html += 	 	 '<div style="float:left;height:100%;margin-left:10px">';
                html += 	 	    '<div class="viewer-companyname">'+ values.companyInfo.company_name +'</div>';
                html += 			'<div class="viewer-addr">'+ values.companyInfo.company_addr1 + ' ' + values.companyInfo.company_addr2 +'</div>';
                html += 	 	 '</div>';
                }
            html +=  	 '</div>';
            /* category name */
            html +=  	 '<div class="viewer-title">';
                if(values.bd_colortag !== ''){
                    html += '<div style="float:left;width:10px;height:100%;background-color:'+values.bd_colortag+'"></div>';
                }
                html += '<span class="label-left-space">'+categoryName+'<span></div>';
            }
            /* basic info */
            html +=		 '<div style="width:100%">';
            html +=		 	'<table border=1 cellpadding=0 cellspacing=0 class="viewer-table section-space">';
            var subject = values.bd_subject;
            if(subject === undefined) subject = ' ';
            html +=		 		'<tr>';
            html +=		 			'<th height="25" '+subjectAttr+' colspan=4>'+subject+'</th>';
            html +=		 		'</tr>';
            html +=		 		'<tr>';
            html +=		 			'<th>'+locale.main.user+'</th>';
            html +=		 			'<td>'+values.bd_name+'</td>';
            html +=		 			'<th>'+locale.main.regDate+'</th>';
            html +=		 			'<td>'+values.bd_regdate+'</td>';
            html +=		 		'</tr>';
            var remark = values.bd_content;
            if(remark === undefined) remark = '';
            html +=		 		'<tr>';
            html +=		 			'<td height=25 '+contentAttr+' colspan=4>'+remark+'</td>';
            html +=		 		'</tr>';
            html +=		 	'</table>';
            html +=		 '</div>';
            /* custom fields */
            if(values.bd_data.length > 0){
                html +=	 	'<div style="width:100%" class="section-space">';
                html +=		 	'<table border=1 cellpadding=0 cellspacing=0 class="viewer-table section-space">';
                Ext.Array.each(values.bd_data, function(entry, index){
                    var customAttr = ' class="custom-field" fieldIndex="'+index+'" bd_idx="'+values.bd_idx+'" cols_idx="'+entry.cols_idx+'" cols_name="'+entry.cols_name+'" cols_type="'+entry.cols_type + '"';
                    if(entry.cols_type == 'dataset'){
                        html +=		 		'<tr>';
                        html +=		 			'<th colspan=2>'+entry.cols_name+'</th>';
                        html +=		 		'</tr>';
                        html +=		 		'<tr>';
                        html += 				'<td colspan=2 '+customAttr+'>';
                        html +=                 	entry.data_html+'</td>';
                        html +=		 		'</tr>';
                    }
                    /* link field */
                    else if(entry.cols_type == 'link'){
                            html +=		 		'<tr>';
                            html +=		 			'<th colspan=2>'+entry.cols_name+'</th>';
                            html +=		 		'</tr>';
                            html +=		 		'<tr>';
                            html += 				'<td height=23 colspan=2 '+customAttr+'>';
                        if(entry.data_val.length > 0){
                            html += 					'<div style="width:100%">';
                            var ids = entry.data_val.split(',');
                            Ext.Array.each(ids, function(item){
                                var url = domain + '/thumb/' + item.trim() + '/0/T';
                             var parameters = item.trim() + ',' + item.cols_name;
                                var clickEvt = 'getController(\'Viewer\').showLinkInformation('+parameters+')';
                                html +=		 				'<div class="viewer-link" onclick="'+clickEvt+'" cols_name="'+item.cols_name+'" bd_idx="'+item.trim()+'"';
                                html += 					' style="background:URL('+url+');background-repeat:no-repeat;background-position:center">';
                                html += 				    '</div>';
                            });
                            html += 					'</div>';
                        }
                            html +=		 			'</td>';
                            html +=		 		'</tr>';
                    }
                    /* end link field */
                    /* color radio field */
                    else if(entry.cols_type == 'colorchk'){
                            html +=		 		'<tr>';
                            html +=		 			'<th>'+entry.cols_name+'</th>';
                            html += 				'<td  '+customAttr+'>';
                        if(entry.data_val.length > 0){
                            html += 					me.getColorradio(entry.data_val);
                        }
                            html += 				'</td>';
                            html +=		 		'</tr>';
                    }
                    /* end color radio field */
                    else if(entry.cols_type == 'color'){
                            html +=		 		'<tr>';
                            html +=		 			'<th>'+entry.cols_name+'</th>';
                            html += 				'<td  '+customAttr+'><div  style="width:15px;height:15px;background-color:'+entry.data_val+'"></div></td>';
                            html +=		 		'</tr>';
                    }
                    else if(entry.cols_type == 'color256'){
                            html +=		 		'<tr>';
                            html +=		 			'<th>'+entry.cols_name+'</th>';
                            html += 				'<td  '+customAttr+'>';
                            Ext.Array.each(entry.data_val.split(','), function(item){
                                html += 			    	'<div class="color256" style="float:left;width:15px;height:15px;background-color:'+item.trim()+'"></div>';
                            });
                            html +=                  '</td>';
                            html +=		 		'</tr>';
                    }
                    else if(entry.cols_type == 'datagrp'){
                            html +=		 		'<tr>';
                            html +=		 			'<th>'+entry.cols_name+'</th>';
                            html += 				'<td  '+customAttr+' value="'+entry.data_val+'" relatedCategory="'+entry.cols_category+'">';
                        if(entry.data_val ==='' || entry.data_val === undefined || entry.data_val === null){

                        }
                        else{
                            html +=                 	'<div style="float:left">'+entry.data_val+'</div>';
                            html +=                 	'<img value="'+entry.data_val+'" onclick="getController(\'Viewer\').showDataGroupInfomation(this)" relatedCategory="'+entry.cols_category+'" src="resources/images/ico_view.png" style="float:left;margin-left:7px;cursor:pointer">';
                        }
                            html +=		 		'</td></tr>';
                    }
                    else{
                        html +=		 		'<tr>';
                        html +=		 			'<th style="width:180px">'+entry.cols_name+'</td>';
                        if(entry.cols_type != 'idx'){
                            html += 				'<td  '+customAttr+'>' +entry.data_val+ '</td';
                        }
                        else{
                            html += 				'<td>' +entry.data_val+ '</td';
                        }
                        html +=		 		'</tr>';
                    }
                });
                html +=		 	'</table>';
                html +=  	'</div>';
            }
            /* attachment */
            if(values.bd_file.length > 0){
                html += '<table border=1 cellpadding=0 cellspacing=0 class="viewer-table section-space">';
                html += '<tr><th>'+locale.main.attachFile+'</th></tr>';
                html += '<tr><td>';
                html += 	'<div style="width:100%">';
                Ext.Array.each(values.bd_file, function(entry, index){
                    var tPath = entry.thumb_path.replace('/T', '');
                    if(!Ext.isIE) tPath += '?c=' + randomString(16);
                    var oPath = tPath.replace('thumb', 'file');//origial image(jpg) size path
                    var dPath = 'binder/down/' + values.bd_idx + '/' + index;//original file download path
                    var pixels = entry.file_height * entry.file_width;
                    var sizeInFormat = me.autoFilesizeFormat(entry.file_size);
                    var resol = entry.file_width+'x'+entry.file_height;
                    var backSize = (entry.file_height < 120 && entry.file_width < 120)? 'auto' : 'cover';
                    var attr = 'thumbSrc="'+tPath+'" viewSrc="'+oPath+'" downSrc="';
                        attr += dPath+'" pixels="'+pixels+'" filesize="'+entry.file_size+'" resolution="'+resol+'" filename="'+entry.file_name+'"';
                    html += 		'<div class="viewer-attach-unit">';
                    html += 			'<div style="background-image:url('+tPath+');background-size:'+backSize+'" '+attr+' class="viewer-attach-image"></div>';
                    html += 			'<div class="viewer-filename" title="'+entry.file_name+'">';
                    html += 				entry.file_name;
                    html += 			'</div>';
                    html += 			'<div class="viewer-filename">'+sizeInFormat+'</div>';
                    html += 		'</div>';
                });
                html += 	'</div>';
                html += '</td></tr>';
                html += '</table>';
            }
            html += '</div>';
        }
        if(type == 'Image'){
            html  =  '<div class="viewer-frame">';
            /* header */
            html +=		 '<div class="viewer-header">';
            if(values.companyInfo !== undefined){
                html += 	 	 '<img src="'+values.companyInfo.company_logo+'" class="viewer-logo">';
                html += 	 	 '<div style="float:left;height:100%;margin-left:10px">';
                html += 	 	    '<div class="viewer-companyname">'+ values.companyInfo.company_name +'</div>';
                html += 			'<div class="viewer-addr">'+ values.companyInfo.company_addr1 + ' ' + values.companyInfo.company_addr2 +'</div>';
                html += 	 	 '</div>';
            }
            html +=  	 '</div>';
            /* category name */
            html +=  	 '<div style="height:30px">';
                if(values.bd_colortag !== ''){
                    html += '<div style="float:left;width:10px;height:100%;background-color:'+values.bd_colortag+'"></div>';
                }
            html += '<span class="label-left-space" style="font-size:25px;line-height:30px">'+categoryName+'<span></div>';
            /* subject */
            var subject = values.bd_subject;
            if(subject === undefined) subject = ' ';
            html +=  	 '<div class="viewer-title"><span class="label-left-space">'+subject+'<span></div>';
            var path;
            if(values.bd_file[0]){
                path = values.bd_file[0].thumb_path.replace('/T', '/M');
            }
            else{
                path = 'resources/images/ico_noimage.gif';
            }
            /* image */
            html +=      '<div style="width:100%;height:500px;background-image:url('+path+')" class="div-image"></div>';
            var remark = values.bd_content;
            if(remark === undefined) remark = '';
            html +=      '<div '+contentAttr+' style="width:100%;margin-top:10px;padding:5px;border:1px solid black">'+remark+'</div>';
            /* custom fields */
            if(values.bd_data.length > 0){
                html +=	 	'<div style="width:100%" class="section-space">';
                html +=		 	'<table border=1 cellpadding=0 cellspacing=0 class="viewer-table section-space">';
                Ext.Array.each(values.bd_data, function(entry, index){
                    var customAttr = ' class="custom-field" fieldIndex="'+index+'" bd_idx="'+values.bd_idx+'" cols_idx="'+entry.cols_idx+'" cols_name="'+entry.cols_name+'" cols_type="'+entry.cols_type + '"';
                    if(entry.cols_type == 'dataset'){
                        html +=		 		'<tr>';
                        html +=		 			'<th colspan=2 '+customAttr+'>'+entry.cols_name+'</th>';
                        html +=		 		'</tr>';
                        html +=		 		'<tr>';
                        html += 				'<td colspan=2>';
                        html +=                 	entry.data_html+'</td>';
                        html +=		 		'</tr>';
                    }
                    /* link field */
                    else if(entry.cols_type == 'link'){
                            html +=		 		'<tr>';
                            html +=		 			'<th colspan=2>'+entry.cols_name+'</th>';
                            html +=		 		'</tr>';
                            html +=		 		'<tr>';
                            html += 				'<td height=23 colspan=2 '+customAttr+'>';
                        if(entry.data_val.length > 0){
                            html += 					'<div style="width:100%">';
                            var ids = entry.data_val.split(',');
                            Ext.Array.each(ids, function(entry){
                                var url = domain + '/thumb/' + entry.trim() + '/0/T';
                                var parameters = entry.trim() + ',' + entry.cols_name;
                                var clickEvt = 'getController(\'Viewer\').showLinkInformation('+parameters+')';
                                html +=		 				'<div class="viewer-link" onclick="'+clickEvt+'" cols_name="'+entry.cols_name+'" bd_idx="'+entry.trim()+'"';
                                html += 					' style="background:URL('+url+');background-repeat:no-repeat;background-position:center">';
                                html += 				    '</div>';
                            });
                            html += 					'</div>';
                        }
                            html +=		 			'</td>';
                            html +=		 		'</tr>';
                    }
                    /* end link field */
                    /* color radio field */
                    else if(entry.cols_type == 'colorchk'){
                            html +=		 		'<tr>';
                            html +=		 			'<th>'+entry.cols_name+'</th>';
                            html += 				'<td  '+customAttr+'>';
                        if(entry.data_val.length > 0){
                            html += 					me.getColorradio(entry.data_val);
                        }
                            html += 				'</td>';
                            html +=		 		'</tr>';
                    }
                    else if(entry.cols_type == 'datagrp'){
                            html +=		 		'<tr>';
                            html +=		 			'<th>'+entry.cols_name+'</th>';
                            html += 				'<td  '+customAttr+' value="'+entry.data_val+'" relatedCategory="'+entry.cols_category+'">';
                        if(entry.data_val ==='' || entry.data_val === undefined || entry.data_val === null){

                        }
                        else{
                            html +=                 	'<div style="float:left">'+entry.data_val+'</div>';
                            html +=                 	'<img value="'+entry.data_val+'" onclick="getController(\'Viewer\').showDataGroupInfomation(this)" relatedCategory="'+entry.cols_category+'" src="resources/images/ico_view.png" style="float:left;margin-left:7px;cursor:pointer">';
                        }
                            html +=		 		'</td></tr>';
                    }
                    /* end color radio field */
                    else if(entry.cols_type == 'color'){
                            html +=		 		'<tr>';
                            html +=		 			'<th>'+entry.cols_name+'</th>';
                            html += 				'<td  '+customAttr+'><div  style="width:15px;height:15px;background-color:'+entry.data_val+'"></div></td>';
                            html +=		 		'</tr>';
                    }
                    else if(entry.cols_type == 'color256'){
                            html +=		 		'<tr>';
                            html +=		 			'<th>'+entry.cols_name+'</th>';
                            html += 				'<td  '+customAttr+'>';
                            Ext.Array.each(entry.data_val.split(','), function(item){
                                html += 			    	'<div class="color256" style="float:left;width:15px;height:15px;background-color:'+item.trim()+'"></div>';
                            });
                            html +=                  '</td>';
                            html +=		 		'</tr>';
                    }
                    else{
                        html +=		 		'<tr>';
                        html +=		 			'<th style="width:180px">'+entry.cols_name+'</td>';
                        if(entry.cols_type != 'idx'){
                            html += 				'<td  '+customAttr+'>' +entry.data_val+ '</td';
                        }
                        else{
                            html += 				'<td>' +entry.data_val+ '</td';
                        }
                        html +=		 		'</tr>';
                    }
                });
                html +=		 	'</table>';
                html +=  	'</div>';
            }
            /* attachment */
            if(values.bd_file.length > 0){
                html += '<table border=1 cellpadding=0 cellspacing=0 class="viewer-table section-space">';
                html += '<tr><th>'+locale.main.attachFile+'</th></tr>';
                html += '<tr><td>';
                html += 	'<div style="width:100%">';
                Ext.Array.each(values.bd_file, function(entry, index){
        //             if(index > 0){
                        var tPath = entry.thumb_path.replace('/T', '');//thumbnail path
                        if(!Ext.isIE) tPath += '?c=' + randomString(16);;
                        var oPath = tPath.replace('thumb', 'file');//origial image(jpg) size path
                        var dPath = 'binder/down/' + values.bd_idx + '/' + index;//original file download path
                        var pixels = entry.file_height * entry.file_width;
                        var sizeInFormat = me.autoFilesizeFormat(entry.file_size);
                        var resol = entry.file_width+'x'+entry.file_height;
                        var backSize = (entry.file_height < 120 && entry.file_width < 120)? 'auto' : 'cover';
                        var attr = 'thumbSrc="'+tPath+'" viewSrc="'+oPath+'" downSrc="';
                        attr += dPath+'" pixels="'+pixels+'" filesize="'+entry.file_size+'" resolution="'+resol+'" filename="'+entry.file_name+'"';
                        html += 		'<div class="viewer-attach-unit">';
                        html += 			'<div style="background-image:url('+tPath+');background-size:'+backSize+'" '+attr+' class="viewer-attach-image"></div>';
                        html += 			'<div class="viewer-filename" title="'+entry.file_name+'">';
                        html += 				entry.file_name;
                        html += 			'</div>';
                        html += 			'<div class="viewer-filename">'+sizeInFormat+'</div>';
                        html += 		'</div>';
        //             }
                });
                html += 	'</div>';
                html += '</td></tr>';
                html += '</table>';
            }

            html += '</div>';
        }


        return html;
    },

    getColorradio: function(value) {
        var arr = value.split(',');
        var html = '<div style="100%">';
        Ext.Array.each(arr, function(entry){
            var units = entry.trim().split('||');
            html += '<div style="float:left;width:13px;height:13px;margin-right:3px;background-color:'+units[0]+'"></div>';
            html += '<div style="float:left;">';
            html += units[1];
            html += '</div>';
        });
        html += '</div>';
        return html;
    },

    autoFilesizeFormat: function(value) {
          var i = Math.floor( Math.log(value) / Math.log(1024) );
          return ( value / Math.pow(1024, i) ).toFixed(2) * 1 + ' ' + ['B', 'kB', 'MB', 'GB', 'TB'][i];
    },

    setInputField: function(target, clickListener) {
        var me = this;

        /* input that will be added */
        var element = document.createElement('input');
        var el = Ext.get(element);
        /* td that slected */
        var target = Ext.get(target);
        /* attributes of td */
        var fieldType = target.getAttribute('field_type');
        var bd_idx = target.getAttribute('bd_idx');
        /* text in td */
        var value = target.dom.textContent;
        target.dom.textContent = '';
        target.appendChild(el);
        el.setStyle({width:'100%'});
        element.value = value;
        element.setAttribute('title', locale.upload.cellEditTip);
        el.focus();

        if(target.getAttribute('cols_type') == 'number'){
            element.setAttribute('onkeypress', 'getController(\'Viewer\').isNumber(event)');
        }

        el.on('keyup', function(e){
            if(e.keyCode == 27){//in case press ESC
                el.destroy();
                target.dom.textContent = value;
                /* resume click event to target that dispatched at onViewerRender() */
                target.on('click', clickListener);
            }
            if(e.keyCode == 13){//in case press Enter
                /* resume click event to target that dispatched at onViewerRender() */
                target.on('click', clickListener);
                var val = el.dom.value.toString();
                target.dom.textContent = val;
                el.destroy();
                var query = '';
                var colsIdx = '';
                if(fieldType == 'subject'){
                    query = '?bd_idx='+bd_idx+'&data_name=bd_subject&data_val=' + val;
                    colsIdx = 'bd_subject';
                }
                /* for custom field */
                else{
                    var idx = target.getAttribute('cols_idx');
                    query = '?bd_idx='+bd_idx+'&cols_idx=' + idx + '&data_val=' + val;
                }
                me.updateCellValue(query);

            }
        });
    },

    setHtmlEditorField: function(target, win) {
        var me = this;

        /* td that slected */
        var target = Ext.get(target);
        /* attributes of td */
        var fieldType = target.getAttribute('field_type');
        var bd_idx = target.getAttribute('bd_idx');
        var editor = win.down('htmleditor');
        var val = editor.getValue();
        win.close();
        var query = '';
        var colsIdx = '';
        if(fieldType == 'content'){
            query = '?bd_idx='+bd_idx+'&data_name=bd_content&data_val=' + val;
            colsIdx = 'bd_content';
        }
        else{
            var idx = target.getAttribute('cols_idx');
            query = '?bd_idx='+bd_idx+'&cols_idx=' + idx + '&data_val=' + val;
        }
        target.dom.innerHTML = val;
        me.updateCellValue(query);
    },

    setQuery: function(target, val, win) {
        var colsIdx = target.getAttribute('cols_idx');
        var bdIdx = target.getAttribute('bd_idx');
        var query = '?bd_idx=' + bdIdx + '&cols_idx=' + colsIdx + '&data_val=' + val;
        this.updateCellValue(query, win);
        Ext.get(target).dom.innerHTML = val;
    },

    updateDatasetValue: function(params, target, win) {
        var ctlr = getController('Main');
        Ext.data.JsonP.request({
            url:domain + '/binder/expDataUpdate',
            params:params,
            callback:function(response){

            },
            success:function(response){
                if(response.result){
                    Ext.toast(locale.upload.edited);
                    /* load store that related with viewer */
                    /* reflesh grid */
                    var viewer = ctlr.getViewPan().down('viewer');
                    var dStore = Ext.getStore('dStore_' + viewer.categoryId);
                    dStore.load();
                    if(win){
                        win.close();
                    }
                    Ext.get(target).dom.innerHTML = response.html;

                    /* 추가된 cell 값을 표시하기 위해서 다시 불러와 fStore에 적용 */
                    /* 수정하자마자 Viewer dataset 다시 수정할 때 변경된 값이 제대로 grid에 표시되게 하기 위함 */
                    Ext.data.JsonP.request({
                        url:getDataWriteApi(),
                        params:{
                            bd_idx:viewer.record.bd_idx,
                            html:0
                        },
                        success:function(response){
                            /* field store */
                            var colsList = response.categoryColsList;
                            /* field store for make grid fields */
                            var fStore = Ext.getStore('fStore_' + viewer.categoryId);

                            if(fStore === undefined){
                                fStore = Ext.create(appName + '.store.FieldStore',{
                                    storeId:'fStore_' + viewer.categoryId,
                                    data:colsList
                                });
                            }
                            else{
                                fStore.setData(colsList);
                            }
                        }
                    });

                }
            },
            failure:function(){
                alert(locale.main.networkProblem);
            }

        });
    },

    updateCellValue: function(query, win) {
        var ctlr = getController('Main');

        Ext.data.JsonP.request({
            url:domain + '/binder/expDataUpdate' + query,
            callback:function(response){

            },
            success:function(response){
                if(response.result){
                    Ext.toast(locale.upload.edited);
                    /* load store that related with viewer to reflesh grid */
                    var viewer = ctlr.getViewPan().down('viewer');
                    var dStore = Ext.getStore('dStore_' + viewer.categoryId);
                    dStore.load();
                    /* some custom field(selectbox) need to remove widow after finish all */
                    if(win){
                        win.close();
                    }
                }
            },
            failure:function(){
                alert(locale.main.networkProblem);
            }

        });
    },

    isNumber: function(event) {
        var key = event.keyCode;
        if(!(key==8 || key==9||key==13||key==46||key==144 ||(key>=48&&key<=57)||key==110||key==190)){
            alert(locale.main.onlyNumber);
            event.returnValue=false;
        }
    },

    showLinkInformation: function(bdIdx, colsName) {
        var me = this;
        var viewer = this.getViewPan().down('viewer');
        /* returning in Viewer edit mode */
        if(viewer.getEditable()) return;
        Ext.data.JsonP.request({
            url:getViewApi(),
            params:{
                bd_idx:bdIdx
            },
            success:function(response){
                var lnkData = response.binderView;
                lnkData.companyInfo = companyInfo;
                var html = me.generateHtml(lnkData, 'Default', false);
                var win = Ext.create('Ext.window.Window',{
                    modal:true,
                    ghost:false,
                    title:colsName,
                    width:700,
                    bodyStyle:'padding:20px',
                    items:[
                        {
                            xtype:'container',
                            html:html,
                            width:'100%',
                            maxHeight:800,
                            scrollable:true
                        }
                    ]
                }).show();
            }
        });

    },

    /* Called from html in Viewer */
    showDataGroupInfomation: function(target) {
        var viewer = this.getViewPan().down('viewer');
        /* do not open window when click at the editmode */
        /* direct editing window will open instead */
        if(viewer.getEditable()) return;

        var me = this;
        var cId = target.getAttribute('relatedCategory');
        var value = target.getAttribute('value');
        var query = 'ca_id=' + cId;
        Ext.data.JsonP.request({
            params:{
                se_subject:value
            },
            url:getDataListByIdApi(query),
            success:function(response){
                var val = response.binderList[0];
                var html = me.generateHtml(val, 'Default', false);
                var win = Ext.create('Ext.window.Window',{
                    modal:true,
                    ghost:false,
                    width:700,
                    bodyStyle:'padding:20px',
                    items:[
                        {
                            xtype:'container',
                            html:html,
                            width:'100%',
                            maxHeight:800,
                            scrollable:true
                        }
                    ]
                }).show();
            }
        });
    }

});
