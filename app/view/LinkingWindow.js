/*
 * File: app/view/LinkingWindow.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TaskManager.view.LinkingWindow', {
    extend: 'Ext.window.Window',
    alias: 'widget.linkingwindow',

    requires: [
        'TaskManager.view.LinkingWindowViewModel',
        'Ext.tree.Panel',
        'Ext.tree.View',
        'Ext.grid.Panel',
        'Ext.grid.column.Column',
        'Ext.grid.plugin.DragDrop',
        'Ext.util.Point',
        'Ext.toolbar.Paging',
        'Ext.form.field.Text',
        'Ext.button.Button',
        'Ext.form.Label'
    ],

    config: {
        categoryId: '',
        opener: null
    },

    viewModel: {
        type: 'linkingwindow'
    },
    height: 750,
    width: 1000,
    layout: 'border',
    bodyPadding: 20,
    bodyStyle: {
        'background-color': '#ffffff'
    },
    ghost: false,
    maximizable: true,
    defaultListenerScope: true,

    bind: {
        title: '{linkWinTitle}'
    },
    items: [
        {
            xtype: 'treepanel',
            region: 'west',
            split: true,
            itemId: 'tree',
            width: 230,
            overlapHeader: true,
            title: 'Category',
            hideHeaders: true
        },
        {
            xtype: 'container',
            flex: 1,
            region: 'center',
            split: true,
            itemId: 'listContainer',
            style: 'border:1px solid #cecece',
            layout: 'fit',
            items: [
                {
                    xtype: 'gridpanel',
                    type: 'normal',
                    itemId: 'listForLink',
                    frameHeader: false,
                    header: false,
                    title: 'Data List',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'string',
                            text: 'String'
                        }
                    ],
                    viewConfig: {
                        plugins: [
                            {
                                ptype: 'gridviewdragdrop',
                                ddGroup: 'gridData'
                            }
                        ]
                    },
                    dockedItems: [
                        {
                            xtype: 'pagingtoolbar',
                            dock: 'bottom',
                            itemId: 'pagingToolbar',
                            width: 360,
                            displayInfo: true,
                            displayMsg: 'Data {0} - {1} of {2}',
                            items: [
                                {
                                    xtype: 'textfield',
                                    cls: 'searchbox',
                                    itemId: 'linkSearch',
                                    margin: '0 0 0 3',
                                    hideLabel: true,
                                    labelWidth: 0
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        var val = button.up('pagingtoolbar').down('#linkSearch').getValue();
                                        var ctrl = getController('Main');
                                        var query = "&se_all=" + val;
                                        ctrl.getServerData('', query, button.up('pagingtoolbar').up('gridpanel'));
                                    },
                                    itemId: 'findLinkData',
                                    margin: '0 6 0 6',
                                    icon: 'resources/images/find.png'
                                }
                            ]
                        }
                    ],
                    listeners: {
                        celldblclick: 'onDataListCellDblClick'
                    }
                }
            ]
        },
        {
            xtype: 'panel',
            getLinkData: function() {
                return this.items.items;
            },
            region: 'south',
            height: 185,
            itemId: 'dropBox',
            scrollable: true,
            style: {
                'background-color': '#eeeeee',
                border: '1px solid #cccccc'
            },
            layout: 'hbox',
            frameHeader: false,
            header: false,
            dockedItems: [
                {
                    xtype: 'container',
                    dock: 'top',
                    height: 35,
                    itemId: 'header',
                    layout: {
                        type: 'hbox',
                        align: 'middle',
                        pack: 'end'
                    },
                    items: [
                        {
                            xtype: 'label',
                            flex: 1,
                            margin: '0 0 0 8',
                            bind: {
                                text: '{dropHere}'
                            }
                        },
                        {
                            xtype: 'button',
                            handler: function(button, e) {
                                var container = button.up('container').up('container');
                                var dBox = container.queryById('dropBox');
                                dBox.removeAll();
                            },
                            bind: {
                                text: '{reset}'
                            }
                        },
                        {
                            xtype: 'button',
                            handler: function(button, e) {
                                var dropBox = button.up('#dropBox');
                                var lnkWin = dropBox.up('window');
                                var newRqt = lnkWin.opener;
                                if(newRqt){
                                    /* in case upload or edit by new request */
                                    var luCon = newRqt.down('#' + lnkWin.getItemId() + '_unitCon');
                                    for (var i=dropBox.getLinkData().length; i--; ) {
                                        luCon.add(dropBox.getLinkData()[i]);
                                    }
                                    lnkWin.close();

                                }
                                else{
                                    /* in case upload or edit by viewer */
                                    lnkWin.fireEvent('save');
                                }
                            },
                            margin: '0 0 0 3',
                            bind: {
                                text: '{saveClose}'
                            }
                        }
                    ]
                }
            ],
            listeners: {
                render: 'onDropBoxRender'
            }
        }
    ],
    listeners: {
        beforerender: 'onWindowBeforeRender'
    },

    onDataListCellDblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        var linkWin = tableview.up('window');
        var dropBox = linkWin.down('#dropBox');
        /* check units in dropBox of linkingWindow */
        var preUnit = dropBox.down('#unit_' + record.data.bd_idx);
        /* check units in linkedData of newRequest view */
        /* newRequest를 통해 업로드하거나 수정할 때만 체크 */
        var rqtWin = Ext.getCmp('newRequestWin_' + selectedCategory);
        var rqtWin = linkWin.opener;
        /* if request win is opened that is new request mode or edit request mode */
        if(rqtWin && !rqtWin.hidden){
            var oldUnit = linkWin.opener.down('#unit_' + record.data.bd_idx);
            /* check if it has been added */
            if(oldUnit !== null || preUnit !== null){
                Ext.toast(locale.main.duplicated);
                return;
            }
        }
        else{
            /* in case edit by viewer directly */
            if(preUnit !== null){
                Ext.toast(locale.main.duplicated);
                return;
            }
        }

        var linkUnit = Ext.create(appName + '.view.LinkUnit', {
            itemId:'unit_' + record.data.bd_idx
        });

        /* check if dropbox has a unit otherwise show 'drop here' message again */
        linkUnit.on('destroy', function(unit){
            if(dropBox.items.length === 0){
        //         dropBox.down('#header').setHtml('<div style="text-align:center;width:100%;margin-top:8px">' + locale.main.dropHere + '</div>');
            }
        });
        if(record.data.thumb_path){
            linkUnit.down('#image').setStyle('background-image', 'url(' +record.data.thumb_path+ ')');
        }
        else{
            linkUnit.down('#image').setStyle('background-image', 'url(resources/images/ico_noimage.gif');
        }

        linkUnit.getViewModel().setData({
            src:record.data.thumb_path,
            bdIdx:record.data.bd_idx,
            unitTitle:record.data.bd_subject
        });
        dropBox.add(linkUnit);
    },

    onWindowBeforeRender: function(component, eOpts) {
        var tree = component.down('#tree');
        tree.setTitle(locale.main.category);
        var tStore = Ext.create('Ext.data.TreeStore', {
            model:'CateModel', //defined at globals.js
            proxy: {
                type: 'jsonp',
                reader: {
                    type: 'json'
                },
                api: {
                    read: getCategoryListApi()
                }
            },
            listeners:{
                load:function(){
                }
            }
        });
        tStore.load();
        tree.setStore(tStore);
        var ctrl = getController('Main');
        ctrl.getServerData('', '', component.down('gridpanel'));
        tree.getSelectionModel().on('select', function(sm, node, index){
            ctrl.getServerData(node.id, '&ca_id=' + node.id, component.down('gridpanel'));
        });
    },

    onDropBoxRender: function(component, eOpts) {
        var dropEl = component.el.dom;
        var me = component;
        var dropTarget = Ext.create('Ext.dd.DropTarget', dropEl, {
            ddGroup:'gridData',
            notifyEnter:function(ddSource, e, data){
                /* hide 'drop here' message when a data dragged on dropBox */
                me.down('#header').setHtml('');
            },
            notifyOut:function(){
                if(me.items.length === 1){
                    /* show 'drop here' message when a data placed out of dropBox */
        //             me.down('#header').setHtml('<div style="text-align:center;width:100%;margin-top:8px">' + locale.main.dropHere + '</div>');
                }
            },
            notifyDrop:function(ddSource, e, data){
                var record = ddSource.dragData.records[0];
                /* check units in dropBox of linkingWindow */
                var preUnit = me.down('#unit_' + record.data.bd_idx);
                var oldUnit = null;
                /* check units in linkedData of newRequest view */
                var rqtWin = component.up('window').opener;
                /* if request win is opened that is new request mode or edit request mode */
                if(rqtWin && !rqtWin.hidden){
                    oldUnit = rqtWin.down('#' + me.up('window').getItemId()).down('#unit_' + record.data.bd_idx);
                }
                /* check if it has been added */
                if(oldUnit !== null || preUnit !== null){
                    Ext.toast(locale.main.duplicated);
                    return;
                }
                /* drop into dropBox the dragged data */
                var linkUnit = Ext.create(appName + '.view.LinkUnit', {
                    itemId:'unit_' + record.data.bd_idx
                });
                linkUnit.getViewModel().setData({
                    src:record.data.thumb_path,
                    bdIdx:record.data.bd_idx,
                    unitTitle:record.data.bd_subject
                });
                /* check if dropbox has a unit otherwise show 'drop here' message again */
                linkUnit.on('destroy', function(unit){
                    if(me.items.length === 0){
        //                 container.setHtml('<div style="text-align:center;width:100%;margin-top:8px">' + locale.main.dropHere + '</div>');
                    }
                });
                if(record.data.thumb_path){
                    linkUnit.down('#image').setStyle('background-image', 'url(' +record.data.thumb_path+ ')');
                }
                else{
                    linkUnit.down('#image').setStyle('background-image', 'url(resources/images/ico_noimage.gif');
                }
                me.add(linkUnit);
            }
        });
    }

});