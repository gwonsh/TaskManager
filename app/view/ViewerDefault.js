/*
 * File: app/view/ViewerDefault.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TaskManager.view.ViewerDefault', {
    extend: 'Ext.container.Container',
    alias: 'widget.viewerdefault',

    requires: [
        'TaskManager.view.ViewerDefaultViewModel',
        'Ext.container.Container',
        'Ext.XTemplate',
        'Ext.form.Label',
        'Ext.form.field.Display',
        'Ext.toolbar.Spacer',
        'Ext.form.field.Checkbox'
    ],

    config: {
        categoryId: ''
    },

    viewModel: {
        type: 'viewerdefault'
    },
    height: '100%',
    itemId: 'docViewer',
    padding: '40 40 40 40',
    style: 'background:#ffffff;border:1px solid #777777',
    width: '100%',
    defaultListenerScope: true,

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    items: [
        {
            xtype: 'container',
            flex: 1,
            itemId: 'viewerHeader',
            tpl: [
                '<div style="width:100%;height:100%">',
                '    <div style="float:left;width:50px;height:50px;background:url({company_logo});background-repeat:no-repeat;background-position:center;background-size:contain"></div>',
                '    <div style="float:left;font-size:11px;padding-left:10px">',
                '        <div style="font-weight:bold;font-size:17px;width:100%">{company_name}</div>',
                '        <span style="font-weight:bold">Phone: </span>',
                '        <span>{company_phone}, </span>',
                '        <span style="font-weight:bold">Fax: </span>',
                '        <span>{company_fax}</span>',
                '        <div style="font-size:11px;width:100%">{company_addr1} {company_addr2}</div>',
                '        <div style="height:10px;width:100%"></div>',
                '    </div>',
                '</div>'
            ],
            listeners: {
                afterrender: 'onViewerHeaderAfterRender'
            }
        },
        {
            xtype: 'container',
            height: 40,
            style: 'background-color:#333333',
            layout: {
                type: 'hbox',
                align: 'middle',
                padding: 10
            },
            items: [
                {
                    xtype: 'label',
                    itemId: 'formTitle',
                    style: {
                        color: '#ffffff',
                        'font-size': '20px',
                        'font-weight': 'bold'
                    },
                    text: '\'\'',
                    listeners: {
                        beforerender: 'onFormTitleBeforeRender'
                    }
                }
            ]
        },
        {
            xtype: 'container',
            cls: 'view-input-group',
            margin: '16 0 0 0',
            style: {
                border: '1px solid #000',
                
            },
            width: '100%',
            layout: {
                type: 'hbox',
                align: 'stretch'
            },
            items: [
                {
                    xtype: 'displayfield',
                    flex: 2,
                    itemId: 'dfName',
                    fieldLabel: 'Name',
                    labelClsExtra: 'view-input-label',
                    labelWidth: 60,
                    bind: {
                        value: '{bd_name}'
                    },
                    listeners: {
                        beforerender: 'onDfNameBeforeRender'
                    }
                },
                {
                    xtype: 'displayfield',
                    flex: 1,
                    itemId: 'dfDate',
                    fieldLabel: 'Date',
                    labelClsExtra: 'view-input-label',
                    labelWidth: 55,
                    bind: {
                        value: '{bd_regdate}'
                    },
                    listeners: {
                        beforerender: 'onDfDateBeforeRender'
                    }
                },
                {
                    xtype: 'displayfield',
                    flex: 1,
                    itemId: 'dfID',
                    fieldLabel: 'ID',
                    labelClsExtra: 'view-input-label',
                    labelWidth: 30,
                    bind: {
                        value: '{idx}'
                    }
                }
            ]
        },
        {
            xtype: 'container',
            cls: 'view-input-group',
            margin: '-1 0 0 0',
            style: {
                border: '1px solid #000',
                
            },
            width: '100%',
            layout: {
                type: 'hbox',
                align: 'stretch'
            },
            items: [
                {
                    xtype: 'displayfield',
                    flex: 1,
                    itemId: 'dfTitle',
                    margin: '-1 0 0 0',
                    fieldLabel: 'Title',
                    labelClsExtra: 'view-input-label',
                    labelWidth: 60,
                    bind: {
                        value: '{bd_subject}'
                    },
                    listeners: {
                        beforerender: 'onDfTitleBeforeRender'
                    }
                }
            ]
        },
        {
            xtype: 'container',
            hidden: true,
            itemId: 'remarkCon',
            margin: '-1 0 0 0',
            minHeight: 35,
            padding: '6 6 6 6',
            style: 'border:1px solid #000;font-size:13px',
            bind: {
                html: '{bd_content}'
            }
        },
        {
            xtype: 'tbspacer',
            cls: 'preview-spacer'
        },
        {
            xtype: 'container',
            cls: 'custom-field',
            itemId: 'customFieldCon',
            layout: {
                type: 'vbox',
                align: 'stretch'
            }
        },
        {
            xtype: 'tbspacer',
            cls: 'preview-spacer'
        },
        {
            xtype: 'container',
            flex: 1,
            cls: 'preview-section-title',
            style: '',
            items: [
                {
                    xtype: 'label',
                    cls: 'preview-title',
                    itemId: 'txtReferenceImage',
                    text: 'Refrence Image',
                    listeners: {
                        beforerender: 'ontxtReferenceImageBeforeRender'
                    }
                }
            ]
        },
        {
            xtype: 'container',
            itemId: 'attatchCon',
            padding: '10 0 0 0',
            scrollable: false,
            width: '100%',
            layout: 'column'
        },
        {
            xtype: 'tbspacer',
            cls: 'preview-spacer'
        },
        {
            xtype: 'checkboxfield',
            flex: 1,
            fieldLabel: 'Label',
            afterBoxLabelTpl: [
                '<div style=""></div><div></div>',
                '<span></span>'
            ],
            boxLabel: 'Box Label'
        }
    ],

    onViewerHeaderAfterRender: function(component, eOpts) {
        component.setData(companyInfo);
    },

    onFormTitleBeforeRender: function(component, eOpts) {
        component.setText(categoryName);
    },

    onDfNameBeforeRender: function(component, eOpts) {
        component.setFieldLabel(locale.main.name);
    },

    onDfDateBeforeRender: function(component, eOpts) {
        component.setFieldLabel(locale.main.regDate);
    },

    onDfTitleBeforeRender: function(component, eOpts) {
        component.setFieldLabel(locale.main.title);
    },

    ontxtReferenceImageBeforeRender: function(component, eOpts) {
        component.setText(locale.main.refImageTitle);
    },

    addAttachment: function(docs) {
        for(var i=0; i<docs.length; i++){
            var atCon = Ext.create(appName + '.view.AttachmentUnit', {
                margin:'0, 0 10, 0'
            });
            atCon.addImage(docs[i], i);
            this.down('#attatchCon').add(atCon);
        }
    }

});