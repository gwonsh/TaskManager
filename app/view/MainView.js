/*
 * File: app/view/MainView.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TaskManager.view.MainView', {
    extend: 'Ext.container.Viewport',
    alias: 'widget.mainview',

    requires: [
        'TaskManager.view.LoginWindow',
        'Ext.button.Button',
        'Ext.toolbar.Spacer',
        'Ext.tab.Panel',
        'Ext.panel.Tool',
        'Ext.tree.Panel',
        'Ext.tree.View',
        'Ext.XTemplate'
    ],

    viewModel: {
        
    },
    itemId: 'mainView',
    layout: 'border',
    defaultListenerScope: true,

    items: [
        {
            xtype: 'panel',
            region: 'north',
            height: 100,
            itemId: 'headerPan',
            style: {
                'border-bottom': '1px solid #afafaf !important'
            },
            bodyBorder: false,
            bodyCls: 'menuPan',
            bodyStyle: {
                'background-color': '#cdd4dc'
            },
            collapseFirst: false,
            collapsed: false,
            collapsible: false,
            title: '\' \'',
            layout: {
                type: 'hbox',
                align: 'middle'
            },
            items: [
                {
                    xtype: 'button',
                    handler: function(button, e) {
                        var westPan = button.up('#mainView').down('#westPanel');
                        westPan.setActiveItem(0);
                    },
                    height: 50,
                    itemId: 'btnHome',
                    ui: 'plain-toolbar-large',
                    width: 50,
                    icon: 'resources/images/ico_home.png',
                    scale: 'large'
                },
                {
                    xtype: 'button',
                    height: 50,
                    itemId: 'btnNew',
                    ui: 'plain-toolbar-large',
                    width: 50,
                    icon: 'resources/images/ico_main_new.png',
                    scale: 'large',
                    bind: {
                        tooltip: '{newPost}'
                    }
                },
                {
                    xtype: 'button',
                    height: 50,
                    itemId: 'btnEdit',
                    ui: 'plain-toolbar-large',
                    width: 50,
                    icon: 'resources/images/ico_main_edit.png',
                    scale: 'large',
                    bind: {
                        tooltip: '{edit}'
                    }
                },
                {
                    xtype: 'button',
                    height: 50,
                    itemId: 'btnDel',
                    ui: 'plain-toolbar-large',
                    width: 50,
                    icon: 'resources/images/ico_main_del.png',
                    scale: 'large',
                    bind: {
                        tooltip: '{remove}'
                    }
                },
                {
                    xtype: 'button',
                    height: 50,
                    itemId: 'btnPrint',
                    ui: 'plain-toolbar-large',
                    width: 50,
                    icon: 'resources/images/ico_print.png',
                    scale: 'large',
                    bind: {
                        tooltip: '{printIt}'
                    }
                },
                {
                    xtype: 'button',
                    handler: function(button, e) {
                        getController('Main').newComment();
                    },
                    height: 50,
                    itemId: 'btnComment',
                    ui: 'plain-toolbar-large',
                    width: 50,
                    icon: 'resources/images/ico_comment.png',
                    scale: 'large',
                    bind: {
                        tooltip: '{newComment}'
                    }
                },
                {
                    xtype: 'button',
                    height: 50,
                    itemId: 'btnConfig',
                    ui: 'plain-toolbar-large',
                    width: 50,
                    icon: 'resources/images/ico_main_config.png',
                    scale: 'large',
                    bind: {
                        tooltip: '{setting}'
                    }
                },
                {
                    xtype: 'tbspacer',
                    height: 40,
                    style: {
                        'border-left': '1px solid #dddddd',
                        'border-right': '1px solid #aaaaaa'
                    },
                    width: 2
                },
                {
                    xtype: 'container',
                    height: '100%',
                    itemId: 'shortcutCon',
                    margin: '0 8 0 0',
                    layout: {
                        type: 'hbox',
                        align: 'middle'
                    }
                },
                {
                    xtype: 'tbspacer',
                    height: 40,
                    style: {
                        'border-left': '1px solid #dddddd',
                        'border-right': '1px solid #aaaaaa'
                    },
                    width: 2
                },
                {
                    xtype: 'tbspacer',
                    flex: 1,
                    baseCls: 'headerPan',
                    height: 1
                },
                {
                    xtype: 'button',
                    height: 50,
                    itemId: 'btnExit',
                    ui: 'plain-toolbar-large',
                    width: 50,
                    icon: 'resources/images/ico_main_exit.png',
                    scale: 'large',
                    listeners: {
                        click: 'onBtnExitClick'
                    }
                }
            ],
            listeners: {
                render: 'onHeaderPanRender'
            }
        },
        {
            xtype: 'tabpanel',
            flex: 2,
            region: 'west',
            split: true,
            cls: 'westPan',
            hidden: true,
            itemId: 'westPanel',
            style: 'border-top:1px solid #bdc4cd',
            collapsible: true,
            header: {
                hidden: false,
                style: 'border-top:1px solid #afafaf'
            },
            activeTab: 0,
            listeners: {
                tabchange: 'onWestPanelTabChange',
                render: 'onWestPanelRender'
            },
            tools: [
                {
                    xtype: 'tool',
                    type: 'help',
                    listeners: {
                        click: 'onToolClick'
                    }
                },
                {
                    xtype: 'tool',
                    type: 'collapse',
                    listeners: {
                        click: 'onToolClick1',
                        render: 'onToolRender'
                    }
                }
            ]
        },
        {
            xtype: 'panel',
            isFirst: false,
            collapseMode: 'header',
            flex: 2,
            region: 'center',
            split: true,
            id: 'viewPan',
            itemId: 'viewPan',
            scrollable: true,
            animCollapse: false,
            bodyPadding: 20,
            collapseDirection: 'right',
            collapsible: true,
            frameHeader: false,
            iconCls: 'compose',
            listeners: {
                beforeshow: 'onViewPanBeforeShow'
            },
            items: [
                {
                    xtype: 'container',
                    itemId: 'splash',
                    layout: 'fit'
                },
                {
                    xtype: 'container',
                    hidden: true,
                    itemId: 'viewCon',
                    style: 'background-color:white',
                    listeners: {
                        afterrender: 'onViewConAfterRender'
                    }
                }
            ],
            tools: [
                {
                    xtype: 'tool',
                    itemId: 'printDoc',
                    type: 'print',
                    bind: {
                        tooltip: '{printIt}'
                    },
                    listeners: {
                        click: 'onPrintDocClick'
                    }
                }
            ]
        },
        {
            xtype: 'panel',
            flex: 1,
            region: 'east',
            split: true,
            hidden: true,
            itemId: 'eastPanel',
            style: 'background:#ffffff',
            width: 150,
            layout: 'border',
            bodyStyle: {
                background: '#ffffff'
            },
            collapsible: true,
            items: [
                {
                    xtype: 'treepanel',
                    flex: 1,
                    floatable: false,
                    region: 'west',
                    split: true,
                    cls: 'titleHeader',
                    itemId: 'categoryTree',
                    width: '100%',
                    overlapHeader: true,
                    titleCollapse: true,
                    hideHeaders: true,
                    rootVisible: false,
                    bind: {
                        title: '{referenceCategory}'
                    },
                    viewConfig: {
                        listeners: {
                            itemclick: 'onViewItemClick'
                        }
                    },
                    tools: [
                        {
                            xtype: 'tool',
                            itemId: 'refresh',
                            tooltipType: 'title',
                            type: 'refresh',
                            bind: {
                                tooltip: '{refresh}'
                            },
                            listeners: {
                                click: 'onRefreshClick'
                            }
                        }
                    ]
                },
                {
                    xtype: 'panel',
                    flex: 1,
                    region: 'south',
                    split: true,
                    cls: 'titleHeader',
                    height: '50%',
                    itemId: 'commentPanel',
                    scrollable: true,
                    animCollapse: false,
                    collapseFirst: false,
                    collapsed: true,
                    collapsedCls: 'titleHeader',
                    collapsible: true,
                    bind: {
                        title: '{commentList}'
                    },
                    items: [
                        {
                            xtype: 'container',
                            itemId: 'commentList',
                            scrollable: false,
                            tpl: [
                                '<tpl for=".">',
                                '    <div style="width:100%;border:1px solid #cccccc;padding:10px;margin-bottom:5px;background-color:#ffffff">',
                                '        <div style="border-bottom:1px dotted #cccccc;">',
                                '            <span style="font-weight:bold">Name</span>: {cmt_name} ',
                                '            <span style="font-weight:bold;margin-left:20px">Date</span>: {cmt_regdate}',
                                '            <div style="float:right;"><img cmt_idx="{cmt_idx}" src="resources/images/ico_delete.png" style="cursor:pointer" class="delComment"></div>',
                                '        </div>',
                                '        <div style="width:100%;margin-top:5px">',
                                '            {cmt_content}',
                                '        </div>          ',
                                '    </div>',
                                '</tpl>'
                            ],
                            listeners: {
                                render: 'onCommentListRender'
                            }
                        }
                    ],
                    tools: [
                        {
                            xtype: 'tool',
                            itemId: 'newComment',
                            tooltipType: 'title',
                            type: 'plus',
                            bind: {
                                tooltip: '{newComment}'
                            },
                            listeners: {
                                click: 'onNewCommentClick'
                            }
                        }
                    ]
                }
            ]
        },
        {
            xtype: 'loginwindow',
            region: 'south'
        }
    ],
    listeners: {
        add: 'onMainViewAdd'
    },

    onBtnExitClick: function(button, e, eOpts) {
        var logoutFrame = Ext.getBody().createChild({
            tag:'iframe',
            cls:'x-hidden',
            id:'iFrame',
            name:'iFrame',
            isReady:false
        });
        var logout = function logoutApp(){
            document.location.href = 'index.html';
        };
        var url = domain + "/member/logout";
        logoutFrame.dom.src = url;

        setTimeout(logout, 500);
    },

    onHeaderPanRender: function(component, eOpts) {
        var header = component.getHeader();
        header.setStyle('background-color', '#000000');
        header.getTitle().setStyle({color:'white', 'font-weight':'bold'});
    },

    onWestPanelTabChange: function(tabPanel, newCard, oldCard, eOpts) {
        var ctlr = getController('Main');
        selectedCategory = newCard.categoryId;
        categoryName = newCard.title;
        tabPanel.up('viewport').down('#headerPan').setTitle('SMARTORI Task Manager - ' + newCard.title);

        /* because IE9 makes problem in css of tab */
        if(getIEVersion() < 10){
            newCard.tab.setStyle('background-color', '#ffffff !important');
            if(oldCard) oldCard.tab.setStyle('background-color', '#79818b !important');
        }

        /* if activetab has a selected record, view it */
        var selected = tabPanel.getActiveTab().getSelectionModel().getSelection()[0];
        if(!selected){
            ctlr.showSplash(true);
            ctlr.getViewPan().down('#viewCon').setHidden(true);
        }
        else{
            ctlr.viewDocument(selected.get('ca_id'), selected.get('bd_idx'));
        }

        Ext.data.JsonP.request({
            url:getCategoryViewApi(selectedCategory),
            success:function(response){
                newCard.categoryInfo = response;
                var options = {};
                if(newCard.categoryInfo.ca_option !== null && newCard.categoryInfo.ca_option !== ''){
                    var option = newCard.categoryInfo.ca_option.replace(/ /g, '');
                    var tmpArr = option.split('--');
                    for(var i=0; i<tmpArr.length; i++){
                        if(tmpArr[i] !== ''){
                            var oUnit = tmpArr[i].replace(/ /g, '').split(':');
                            options[oUnit[0]] = oUnit[1];
                        }
                    }
                }
                config.option = options;
                ctlr.setMenuPermission(response);
            }
        });
    },

    onToolClick: function(tool, e, owner, eOpts) {
        var win = Ext.create('Ext.window.Window', {
            width:'90%',
            height:'90%',
            modal:true,
            scrollable:true,
            layout:{
                type:'vbox',
                align:'center'
            },
            items:[
                {
                    xtype:'image',
                    width:1256,
                    height:826,
                    src:'resources/images/usage/usage_main.jpg'
                }
            ]
        }).show();
    },

    onWestPanelRender: function(component, eOpts) {
        component.getTabBar().setStyle('background-color', '#f5f5f5');
        component.getTabBar().on('add', function(panel, tab){
            var css = {
                '-webkit-border-top-left-radius': '4px !important',
                '-webkit-border-top-right-radius': '4px !important',
                '-moz-border-top-left-radius': '4px !important',
                '-moz-border-top-right-radius': '4px !important',
                '-ms-border-top-left-radius': '4px !important',
                '-ms-border-top-right-radius': '4px !important',
                '-o-border-top-left-radius:':'4px !important',
                '-o-border-top-right-radius:':'4px !important',
                'border-top-left-radius':'4px !important',
                'border-top-right-radius':'4px !important',
                'padding':'8px 5px 5px 5px !important',
                'margin':'0px',
                'margin-left':'3px'
            };
            tab.setStyle(css);
        });
    },

    onToolClick1: function(tool, e, owner, eOpts) {
        var wPan = tool.up('#westPanel');
        var grid = wPan.getActiveTab();
        var ctlr = getController('Main');
        var type = grid.type;
        var title = grid.getTitle();
        var tabIndex = wPan.items.indexOf(grid);
        grid.destroy();
        if(type == 'normal'){
            ctlr.createNewGrid(grid.categoryId, title, 'gallery', tabIndex);
        }
        else{
           ctlr.createNewGrid(grid.categoryId, title, 'normal', tabIndex);
        }
    },

    onToolRender: function(component, eOpts) {
        if(!isHtml5() || getIEVersion() < 10){
            component.hide();
        }
    },

    onViewPanBeforeShow: function(component, eOpts) {
        var title = '<div style="float:left;margin-top:6px">'+locale.main.preview+'</div>';
        var toggleIco = '<img class="editableToggle" src="resources/images/ico_lock.png" style="float:left;margin:5px 20px 0 10px;cursor:pointer"';
        toggleIco += 'onclick="getController(\'Viewer\').editModeToggle(this)" title="'+locale.menu.editable+'">';
        var viewers = app.doc.Viewer.FORMS;
        // var views = '<select id="formSelector" style="margin:1px 0 0 8px;float:right" onchange="Ext.getCmp(\'viewPan\').fireEvent(\'viewmodechange\', this.selectedIndex)">';

        if(!config.option.formMode) config.option.formMode = 'Default';
        var combo = Ext.create('Ext.form.field.ComboBox',{
            xtype: 'combobox',
            itemId: 'fDselectForm',
            displayField: 'name',
            valueField: 'formId',
            margin:'0 0 3 10',
            value:config.option.formMode,
            listeners: {
                select: function(combo, record, eOpts){
                    var viewer = component.down('#viewer');
                    if(viewer) {
                        html = app.doc.Viewer.FORMS[record.get('index')].getHtml(viewer.info);
                        viewer.setHtml(html);
                    }
                }
            }
        });

        var forms = app.doc.Viewer.FORMS;
        var formData = [];
        for(var i=0; i<forms.length; i++){
            formData.push({
                name:forms[i].getName(),
                formId:forms[i].CLASSNAME,
                index:i
            });
        }
        var store = Ext.create('Ext.data.Store', {
            fields: ['name', 'formId', 'index'],
            data:formData
        });
        combo.setStore(store);
        component.getHeader().add(combo);


        // Ext.Array.each(viewers, function(entry, index){
        //     if(entry.CLASSNAME == preference.option.formMode){
        //         views += '<option index='+index+' selected>'+ entry.getName()+'</option>';
        //     }
        //     else{
        //         views += '<option index='+index+'>'+ entry.getName()+'</option>';
        //     }
        // });
        // views += '</select>';
        component.setTitle(title + toggleIco);
        component.getHeader().setHeight(36);
        // component.on('viewmodechange', function(index){
        //     var viewer = component.down('#viewer');
        //     currentViewMode = index;
        //     if(viewer) {
        //         html = app.doc.Viewer.FORMS[index].getHtml(viewer.info);
        //         viewer.setHtml(html);
        //     }
        // });
    },

    onViewConAfterRender: function(component, eOpts) {
        component.setMinHeight(document.body.clientHeight - 180);
    },

    onPrintDocClick: function(tool, e, owner, eOpts) {
        var ctrl = getController('Main');
        ctrl.printDocument();
    },

    onMainViewAdd: function(container, component, index, eOpts) {
        if(component.xtype == 'bordersplitter'){
            component.width = 3;
            component.setStyle('background-color', '#d9dbdf');
        }
    },

    onViewItemClick: function(dataview, record, item, index, e, eOpts) {
        var me = this;
        var ctrl = getController('Main');
        /* when click one in category */
        var ctrl = getController('Main');
        categoryName = record.get('title');
        var gridType = '';
        if(record.get('data').layout === 0 || record.get('data').layout === 2){
            gridType = 'normal';
        }
        else{
            gridType = 'gallery';
        }

        if(!isHtml5() || getIEVersion() < 10){
            gridType = 'normal';
        }

        ctrl.createNewGrid(record.get('id'), categoryName, gridType);
    },

    onRefreshClick: function(tool, e, owner, eOpts) {
        var tree = tool.up('#categoryTree');
        tree.getStore().load();
    },

    onCommentListRender: function(component, eOpts) {
        //when click bin
        component.getEl().on('click', function(e, target){
            Ext.Msg.confirm(locale.main.caution, locale.main.delAlert, function(btn, text){
                if (btn == 'yes'){
                    var url = getCommentDeleteApi();
                    Ext.data.JsonP.request({
                        url:url,
                        params:{
                            idx:target.getAttribute('cmt_idx')
                        },
                        success:function(response){
                            if(response.result){
                                var ctlr = getController('Main');
                                var chks = ctlr.getWestPanel().getActiveTab().getSelectionModel().getSelection();
                                var bdIdx = chks[0].get('bd_idx');
                                ctlr.setCommentList(bdIdx);
                            }
                            else{
                                Ext.Msg.alert(locale.main.permissionError, locale.main.noPermission, Ext.emptyFn);
                            }
                        },
                        failure:function(response){
                            alert(locale.main.networkProblem);
                        }

                    });

                } else {
                    Ext.toast(locale.main.canceled);
                }
            });

        }, null, {delegate:'img'});
    },

    onNewCommentClick: function(tool, e, owner, eOpts) {
        var ctlr = getController('Main');
        ctlr.newComment();
    }

});